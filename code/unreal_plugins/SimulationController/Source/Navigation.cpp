#include <Navigation.h>

Navigation::Navigation(AActor* agent_actor): agent_actor_(agent_actor)
{
    // Initialize navigation:
    index_path_ = 0; 
    navSystemRebuild();

    initial_position_ = agent_actor_->GetActorLocation(); // Initial position of the agent

    nav_query_ = FPathFindingQuery(agent_actor_, *nav_data_, initial_position_, FVector(0.0f, 0.0f, 0.0f));

    // Set the path query such that case no path to the target can be found, a path that brings the agent as close as possible to the target can still be generated
    nav_query_.SetAllowPartialPaths(true);
    
    // std::string id = Config::getValue<std::string>({"INTERIORSIM", "MAP_ID"});
    // 
    // if (id == "/Game/Maps/Map_237081640"){
    //     execution_counter_ = 0;
    // }
    // else if (id == "/Game/Maps/Map_237081739"){
    //     execution_counter_ = 100;
    // }
    // else if (id == "/Game/Maps/Map_239748000"){
    //     execution_counter_ = 200;
    // }
    // else if (id == "/Game/Maps/Map_239784016"){
    //     execution_counter_ = 300;
    // }
    // else if (id == "/Game/Maps/Map_239784069"){
    //     execution_counter_ = 400;
    // }
    // else {
    //         ASSERT(false);
    // }
}

Navigation::~Navigation()
{
}

void Navigation::resetNavigation()
{
    index_path_ = 0; 
    // navSystemRebuild();

    // initial_position_ = agent_actor_->GetActorLocation(); // Initial position of the agent

    // nav_query_ = FPathFindingQuery(*agent_actor_, *nav_data_, initial_position_, FVector(0.0f, 0.0f, 0.0f));

    // // Set the path query such that case no path to the target can be found, a path that brings the agent as close as possible to the target can still be generated
    // nav_query_.SetAllowPartialPaths(true);

    
}

FVector Navigation::generateRandomInitialPosition()
{
    index_path_ = 0; 

    // Spawn the agent in a random location within the navigation mesh:
    FNavLocation navLocation = nav_mesh_->GetRandomPoint();
    FVector initial_position_ = navLocation.Location;       

    // TODO: debug this mess after the paper submission... 
    // use BoxTracing to adjust pawn spawn height.
    // use mesh bounding box instead of setting.
    //std::cout << "-------------------------------------------" << std::endl;
    //FRotator spawnRotation = agent_actor_->GetActorRotation();
    //FVector center = FVector(0.0f, 0.0f, 3.0f);
    //std::cout << "initialPosition = [" << initial_position_.X << ", " << initial_position_.Y << ", " << initial_position_.Z << "]" << std::endl;
    //traceGround(initial_position_, spawnRotation, FVector(10.0f, 10.0f, 10.0f));
    //initial_position_ = initial_position_ + FVector(0.0f, 0.0f, -3.0f);
    //std::cout << "initial_position_GND = [" << initial_position_.X << ", " << initial_position_.Y << ", " << initial_position_.Z << "]" << std::endl;
    return initial_position_;
}

void Navigation::generateTrajectoryToRandomTarget()
{
    int number_iterations = 0;
    int number_of_way_points = 0;
    float path_criterion = 0.0f;
    float best_path_criterion = 0.0f;
    FNavLocation best_target_location;
    FVector2D relative_position_to_target(0.0f, 0.0f);

    // Path generation polling to get "interesting" paths in every experiment:
    float trajLength = 0.0;
    while (number_iterations < Config::getValue<int>({"SIMULATION_CONTROLLER", "NAVIGATION", "MAX_ITER_REPLAN"})) // Try to generate interesting trajectories with multiple waypoints
    {
        // Get a random target point, to be reached by the agent:
        ASSERT(nav_sys_->GetRandomReachablePointInRadius(initial_position_, Config::getValue<float>({"SIMULATION_CONTROLLER", "NAVIGATION", "TARGET_RADIUS"}), target_location_));

        // Update relative position between the agent and its new target:
        relative_position_to_target.X = (target_location_.Location - initial_position_).X;
        relative_position_to_target.Y = (target_location_.Location - initial_position_).Y;

        // Update navigation query with the new target:
        nav_query_ = FPathFindingQuery(agent_actor_, *nav_data_, initial_position_, target_location_.Location);

        // Genrate a collision-free path between the robot position and the target point:
        FPathFindingResult collision_free_path = nav_sys_->FindPathSync(nav_query_, EPathFindingMode::Type::Regular);

        // If path generation is sucessful, analyze the obtained path (it should not be too simple):
        if (collision_free_path.IsSuccessful() and collision_free_path.Path.IsValid()) {

            if (collision_free_path.IsPartial()) {
                std::cout << "Only a partial path could be found by the planner..." << std::endl;
            }

            number_of_way_points = collision_free_path.Path->GetPathPoints().Num();
            path_criterion = relative_position_to_target.Size() * Config::getValue<float>({"SIMULATION_CONTROLLER", "NAVIGATION", "PATH_WEIGHT_DIST"}) + number_of_way_points * relative_position_to_target.Size() * Config::getValue<float>({"SIMULATION_CONTROLLER", "NAVIGATION", "PATH_WEIGHT_NUM_WAYPOINTS"});

            if (best_path_criterion <= path_criterion) {
                best_path_criterion = path_criterion;
                best_target_location = target_location_;
                path_points_.Empty();
                path_points_ = collision_free_path.Path->GetPathPoints();
                std::cout << "Iteration: " << number_iterations << std::endl;
                std::cout << "Cost: " << best_path_criterion << std::endl;
                std::cout << "Number of way points: " << number_of_way_points << std::endl;
                std::cout << "Target distance: " << relative_position_to_target.Size() * 0.01 << "m" << std::endl;

                trajLength = 0.0;
                for (size_t i = 0; i < number_of_way_points-1; i++) {
                    trajLength += FVector::Dist(path_points_[i].Location, path_points_[i+1].Location);
                }           
                std::cout << "Path length " << trajLength * 0.01 << "m" << std::endl;
            }
            number_iterations++;
        }
    }

    ASSERT(path_points_.Num() > 1);

    target_location_ = best_target_location;

    trajectory_length_ = trajLength * 0.01;

    std::cout << "Initial position: [" << initial_position_.X << ", " << initial_position_.Y << ", " << initial_position_.Z << "]." << std::endl;
    std::cout << "Reachable position: [" << best_target_location.Location.X << ", " << best_target_location.Location.Y << ", " << best_target_location.Location.Z << "]." << std::endl;
    std::cout << "-----------------------------------------------------------" << std::endl;
    std::cout << "Way points: " << std::endl;
    for (auto wayPoint : path_points_) {
        std::cout << "[" << wayPoint.Location.X << ", " << wayPoint.Location.Y << ", " << wayPoint.Location.Z << "]" << std::endl;
    }
    std::cout << "-----------------------------------------------------------" << std::endl;
    index_path_ = 1; // Path point 0 is the initial robot position. getCurrentPathPoint() should therefore return the next point.
}

void Navigation::generateTrajectoryToPredefinedTarget()
{
    int number_iterations = 0;
    int number_of_way_points = 0;
    float path_criterion = 0.0f;
    float best_path_criterion = 0.0f;
    FNavLocation best_target_location;
    FVector2D relative_position_to_target(0.0f, 0.0f);

    // DIRTY HACK for neurips:
    FVector pos = getPredefinedGoalPosition();

    // Path generation polling to get "interesting" paths in every experiment:
    float trajLength = 0.0;
    while (number_iterations < Config::getValue<int>({"SIMULATION_CONTROLLER", "NAVIGATION", "MAX_ITER_REPLAN"})) // Try to generate interesting trajectories with multiple waypoints
    {
        // Update relative position between the agent and its new target:
        relative_position_to_target.X = (target_location_.Location - initial_position_).X;
        relative_position_to_target.Y = (target_location_.Location - initial_position_).Y;

        // Update navigation query with the new target:
        nav_query_ = FPathFindingQuery(agent_actor_, *nav_data_, initial_position_, target_location_.Location);

        // Genrate a collision-free path between the robot position and the target point:
        FPathFindingResult collision_free_path = nav_sys_->FindPathSync(nav_query_, EPathFindingMode::Type::Regular);

        // If path generation is sucessful, analyze the obtained path (it should not be too simple):
        if (collision_free_path.IsSuccessful() and collision_free_path.Path.IsValid()) {

            if (collision_free_path.IsPartial()) {
                std::cout << "Only a partial path could be found by the planner..." << std::endl;
            }

            number_of_way_points = collision_free_path.Path->GetPathPoints().Num();
            path_criterion = relative_position_to_target.Size() * Config::getValue<float>({"SIMULATION_CONTROLLER", "NAVIGATION", "PATH_WEIGHT_DIST"}) + number_of_way_points * relative_position_to_target.Size() * Config::getValue<float>({"SIMULATION_CONTROLLER", "NAVIGATION", "PATH_WEIGHT_NUM_WAYPOINTS"});

            if (best_path_criterion <= path_criterion) {
                best_path_criterion = path_criterion;
                best_target_location = target_location_;
                path_points_.Empty();
                path_points_ = collision_free_path.Path->GetPathPoints();
                std::cout << "Iteration: " << number_iterations << std::endl;
                std::cout << "Cost: " << best_path_criterion << std::endl;
                std::cout << "Number of way points: " << number_of_way_points << std::endl;
                std::cout << "Target distance: " << relative_position_to_target.Size() * 0.01 << "m" << std::endl;

                trajLength = 0.0;
                for (size_t i = 0; i < number_of_way_points-1; i++) {
                    trajLength += FVector::Dist(path_points_[i].Location, path_points_[i+1].Location);
                }           
                std::cout << "Path length " << trajLength * 0.01 << "m" << std::endl;
            }
        }
        number_iterations++;
    }

    ASSERT(path_points_.Num() > 1);

    target_location_ = best_target_location;

    trajectory_length_ = trajLength * 0.01;

    std::cout << "Initial position: [" << initial_position_.X << ", " << initial_position_.Y << ", " << initial_position_.Z << "]." << std::endl;
    std::cout << "Reachable position: [" << target_location_.Location.X << ", " << target_location_.Location.Y << ", " << target_location_.Location.Z << "]." << std::endl;
    std::cout << "-----------------------------------------------------------" << std::endl;
    std::cout << "Way points: " << std::endl;
    for (auto wayPoint : path_points_) {
        std::cout << "[" << wayPoint.Location.X << ", " << wayPoint.Location.Y << ", " << wayPoint.Location.Z << "]" << std::endl;
    }
    std::cout << "-----------------------------------------------------------" << std::endl;
    index_path_ = 1; // Path point 0 is the initial robot position. getCurrentPathPoint() should therefore return the next point.
    execution_counter_++;
}

FVector2D Navigation::getPathPoint(size_t index)
{
    ASSERT(path_points_.Num() != 0);
    ASSERT(index < path_points_.Num());
    return FVector2D(path_points_[index].Location.X, path_points_[index].Location.Y);
}

FVector2D Navigation::getCurrentPathPoint()
{
    ASSERT(path_points_.Num() != 0);
    ASSERT(index_path_ < path_points_.Num());
    return FVector2D(path_points_[index_path_].Location.X, path_points_[index_path_].Location.Y);
}

FVector2D Navigation::updateNavigation()
{
    const FVector agent_current_location = agent_actor_->GetActorLocation();
    FVector2D relative_position_to_goal = getCurrentPathPoint() - FVector2D(agent_current_location.X, agent_current_location.Y);

    target_reached_ = false;

    // If a waypoint is reached
    if ((relative_position_to_goal.Size() * 0.01) < Config::getValue<float>({"SIMULATION_CONTROLLER", "NAVIGATION", "ACCEPTANCE_RADIUS"})) { 

        if (index_path_ < path_points_.Num() - 1) { // Move to the next waypoint
            std::cout << "######## Reached waypoint " << index_path_ << " over " << path_points_.Num() - 1 << " ########" << std::endl;
            index_path_++;
        }
        else { // We reached the final target
            std::cout << "############ Reached the target location ! ############" << std::endl;
            target_reached_ = true;
        }
    }

    return getCurrentPathPoint();
}

FVector Navigation::getPredefinedInitialPosition()
{
std::cout << "#################################################################################################" << std::endl;
    // Dirty hack ...
   // std::vector<float> init_x = {-55.17058, 605.828, -49.09923, -72.088936, 78.05097, 213.83377, -143.6522, 13.976796, -552.5078, 184.92464, -0.02431202, 416.15237, 127.012, 161.02725, 90.90162, -28.501534, 648.50714, -403.23865, -49.50487, -166.94272, -38.213806, -59.03158, -349.25177, -104.83549, -422.43, 57.131504, 440.66553, 219.89088, 45.462708, 96.62158, -36.103622, 177.29239, 467.16986, -82.20623, -113.81563, -69.635895, 165.37589, -100.849945, 114.814514, -77.314545, -333.49872, 347.20706, 170.99013, 160.66351, 69.871994, 202.71648, 190.22708, 576.37585, 543.15356, -425.8011, -430.73856, 362.06506, 128.23683, -21.844406, -604.4077, 121.1786, 578.78595, -75.71443, -10.190317, -402.17734, -0.31946927, -40.28758, 157.7239, 46.827477, -32.207527, 42.503677, 128.42712, 354.00894, 143.39793, -90.58948, -46.645462, 70.33225, 652.43286, -236.31467, 224.66829, -55.900497, 303.84818, -79.15496, 103.326675, -76.896034, -33.7125, -71.50012, -69.88772, 388.90073, -129.0779, 388.67725, -77.83576, 31.113535, 90.05395, 44.506943, -101.53199, 615.53296, 81.99395, -68.69702, 166.2673, -33.728325, -28.17116, -111.26334, -365.5891, -27.327139, 5.769758, 102.68682, -405.52936, -35.785988, -206.56557, 412.36142, -321.8762, 307.4693, 393.26636, -71.357635, 332.62787, 7.7638845, -26.513977, -81.65138, -285.6944, 19.950651, 366.1587, 194.24077, 604.469, -13.574216, -66.428635, -526.32794, -49.780174, -66.54176, -56.596924, -23.893738, -74.819176, -304.88577, 154.76704, -96.18092, 102.40947, 30.944006, -48.84521, -73.591644, -433.67197, 499.97366, -11.31549, 71.63752, -169.12613, 16.703848, 396.75522, -146.00296, 381.0787, 33.934326, -2.2070034, 159.63094, -27.4091, -308.34924, 338.49863, -17.83227, 532.09656, -481.83997, -56.706356, 96.34919, 517.1622, 23.097742, -538.5167, -80.93999, 158.86624, 231.42294, -10.116046, 103.850494, -543.0999, -0.55289114, -7.8031125, -59.894962, -531.27704, -547.6116, 183.3127, -87.5982, -50.157112, -595.28894, 304.72687, -34.463634, 119.35924, 226.01788, 649.371, 155.56143, -41.548466, -64.04184, -88.99487, -43.275475, 148.55121, -29.645384, 308.3476, 86.43219, -49.082798, 212.08199, 11.435111, 53.066097, 594.5963, 99.582306, -83.57587, -29.759068, 11.1832075, 84.98454, -390.34796, -501.17816, -465.3144, 207.49054, 390.23825, -26.740816, -67.2814, -359.26123, -73.849014, -84.75661, 643.8976, 205.56593, 1.4508483, 305.1172, 170.87126, -468.87244, 320.7199, 0.8339457, 376.06433, 211.05186, -28.99752, -23.612, 366.5639, -74.02793, 329.6231, 216.75885, 110.301575, -266.38766, 1.8159759, -56.783386, -49.170906, -630.1787, -552.2273, -47.490845, 135.51389, -43.060406, -226.15755, -78.13698, -7.866948, 235.45918, -47.298615, -296.38812, 35.4241, 379.8015, 380.0498, 33.331516, 39.734924, -64.007034, 48.851368, 370.08014, 13.046911, -545.6002, -20.748953, -29.367548, 20.126757, 66.81911, 199.1266, -8.734639, -174.35406, -36.37287, -99.59086, -18.856281, -50.985905, -46.548916, 134.09276, 54.682484, 104.80801, 453.24063, -13.063965, 380.13806, 66.48285, 364.35864, 71.25084, -274.3961, 387.211, -68.344635, -204.38821, 483.07166, 389.70804, -498.74405, 146.12065, -36.291565, 321.39456, 16.5699, -47.16773, 380.07007, -137.94778, -25.728077, -2.774454, -589.0807, 616.5432, -67.401794, 341.45395, 416.5396, 237.87733, -507.09845, 11.632912, 328.60596, 585.71674, -73.83685, 327.03638, -60.589127, -81.61047, 148.14339, -7.842391, 181.71016, -61.53792, 56.713142, -562.29346, 133.49258, 628.8475, 106.57787, -53.195652, 327.6194, 370.803, -7.8683424, 88.657684, 420.64655, -63.878433, 330.94824, -592.5637, 33.190517, 197.56767, -6.606819, -569.5035, -307.36148, -27.006212, -0.6438435, -89.37919, -33.685276, 499.69073, 349.18402, 128.71603, 144.43213, 208.43219, -51.87151, -10.724803, -30.261326, 47.32248, -57.859085, 243.74748, -61.045914, 112.86629, -31.08757, 650.62366, -49.199482, 504.1847, 84.69388, 226.92548, -33.54843, 112.60782, 149.14139, -41.595654, -81.919235, 203.83481, -44.352596, -473.429, 206.134, 345.62958, 125.15943, -23.818356, 136.20172, 165.55997, -59.299538, -473.00876, -46.445965, 182.328, 132.63014, -187.89915, 425.44702, 145.91586, 45.54649, -21.50861, -60.65621, 356.5434, 133.34468, -49.612667, -45.52705, -34.865993, -12.975624, 64.858795, -473.1547, 55.70226, 98.150444, 223.80362, -65.93886, 98.766365, 199.68857, -42.485275, -116.44257, 603.51404, -32.99669, 237.51079, 315.12927, -477.2125, -12.384741, 108.82336, -0.4096201, -42.643604, 167.038, -162.99815, 380.9082, -160.89203, -62.11793, 362.1543, 191.49498, -141.67474, 347.2635, -553.24695, -67.315865, 144.64662, -37.157043, -11.511605, 152.6955, 415.411, -56.452454, 74.59017, -37.192223, -477.5824, -0.4928339, -251.79823, 156.0085, 312.41992, -69.580475, 306.1608, 337.4953, -603.54614, 126.20686, 303.34598, 438.13715, -436.94357, -105.97681, -544.3777, -63.46802, -15.34637, 65.57775, -71.694786, -441.37772, 367.5356, -50.467915, -36.329967, 78.2232, 114.0136, 108.68427, -63.059288, 148.93079, 170.80933, 210.17982, -29.20638, 134.73969, -49.74096, 91.45028, -42.560963, 404.13828, -161.04877, 102.39782, -500.1699, -31.425089, -379.8746, 397.37683, -418.397, 458.6349, 219.11017, -246.2221, 354.3942, 86.78868, 155.64307, -504.75293, -42.419624, -41.348297, -578.6843, -555.85626, 171.30643, 232.81519, -22.057423, -34.544823, -12.965678, 199.67038, 306.0189, 346.16644, -14.314483, -82.03081, 16.51846, 91.31906, 659.38135, -55.81348, 372.89536, 487.8913, 429.19592, 183.85359, 406.3238, 119.75626, 16.081682, 624.0851, -355.658, 104.41959, 590.0442, 107.687294, -5.920024, 79.606316, -54.140247, 177.86806, -33.736565, 134.45177, -494.2266, -460.5352, -17.224073, 347.82196, -38.58233, -9.331885, -39.041733, -10.990019, 349.12686, 51.50922, -39.114956, 1.7257156, 114.68151, 119.75334, 66.21794, -48.46122, 28.104256, -124.893295, 650.66016, -550.2549, -1.4731605, -72.79477, 59.740776, 118.239685, 65.453674, -637.10126, -49.1541, 68.19688, 104.454575, 159.66447, 358.52533, 627.4197, -77.669716, -49.700966, 227.15425, 16.016413, -135.39717, 362.40445, 147.04927, -474.1296, 144.72235, 375.60016, -81.59433, -646.80975, -132.77435, 342.68085, 322.13635, 372.93164, -540.903, 215.98595};
   // std::vector<float> init_y = {518.1801, 109.942924, 548.73047, 289.6065, -223.70103, 296.7471, -176.19467, -589.7674, -227.84125, 422.3438, -329.35782, 393.69232, 458.10077, -153.38052, 559.77405, -193.20787, 109.865555, -243.2776, 447.55386, -187.44366, -273.21307, 324.39148, -199.05795, -193.59868, -172.9619, -273.21695, 236.63391, 336.99396, 463.84406, -593.21875, 10.227643, -179.4764, 379.43976, 579.2591, -515.3859, 492.9549, 194.49313, 275.7478, 12.434166, 469.74286, -123.14276, -43.35393, 345.09436, -67.14553, -46.51708, -114.69254, -155.68114, 79.570305, -3880.935, -294.13474, -319.818, 240.54674, -129.07097, -445.83682, -296.2234, 309.35095, 106.32361, 8.220734, -351.7049, -195.8364, 512.74866, 470.96558, 186.39877, -582.4285, 1.6925528, -161.38931, 309.1462, 201.00233, 377.75317, -192.06831, 512.1212, -298.53192, 393.2811, -228.86325, -174.44798, -160.99924, 283.13663, 499.09918, -272.78476, 245.37845, -277.1383, 332.22125, -160.73048, 30.04981, -109.11627, 81.411156, 526.1918, -189.71205, -162.65764, 578.1594, -616.832, 428.49945, 39.78347, -518.50543, -45.166546, 242.49945, -281.79184, -531.5057, -143.04826, 419.32474, 284.46582, -0.02060332, -275.08652, -349.92877, -142.26929, 428.58188, -173.21341, -118.60378, -158.81026, 577.6223, -20.911932, -164.02078, -289.5638, 329.25146, -175.3248, -303.46988, 397.0074, -57.36756, 382.26154, 444.83057, 317.66638, -265.21173, 335.75687, 261.84744, 427.3907, 518.6292, 279.1707, -168.6246, 321.7237, 313.41254, -588.80066, 337.9251, 538.599, 274.90936, -293.02747, 417.92783, 350.14606, 18.541815, -140.74182, -174.7485, 241.74922, -166.29112, 228.14784, 469.0976, 338.90918, 21.666779, 511.63293, -192.48509, -1.8307462, -463.00848, 77.49256, -259.89688, -198.28642, -581.62396, 432.55682, 358.4855, -242.3029, 286.29306, -191.17317, -78.034515, 490.36475, -378.53336, -244.40503, 476.204, 455.8697, 353.82562, -203.55542, -284.04642, 304.80737, 314.88916, -447.78888, -311.22214, -44.757217, 541.73145, -458.28836, -119.63195, 402.65045, 177.81573, 409.9955, 435.06192, 325.4598, 443.98264, 86.12128, -319.45752, 416.89233, -599.42896, 461.87146, -146.92403, 344.81573, -602.4749, 88.28511, -165.63307, -191.12025, 490.8246, -271.77164, 62.280304, -188.00821, -221.03462, -287.37634, -138.95268, -209.87872, 467.67303, 554.5082, -186.75174, 577.3375, 331.25494, 405.94968, -209.96883, -341.63745, -55.05899, -44.856976, -363.44882, -11.134634, -519.9593, -58.359207, 325.76758, 574.1402, 251.85252, -151.57552, -615.11414, 29.520967, -141.96921, -381.05457, -148.36398, -345.15564, 246.30968, 275.30103, -165.5171, -234.71713, 336.81253, 535.6616, -205.57648, -162.44289, 494.28067, 347.75443, 436.9468, 425.7064, -188.10017, -579.9722, -68.82115, -16.043024, 441.6573, -146.52087, -145.26282, 476.35425, -139.97784, -280.1916, -285.3779, 480.44647, -197.00813, 508.76462, -211.00128, -166.43419, 301.56952, -194.15492, -324.38678, -144.17776, 520.6981, 352.07397, -0.9478404, 143.21297, 570.97986, -568.4334, 430.42563, 287.00858, 219.98207, -177.50003, -78.09846, -563.13666, -134.38638, 214.17168, 543.95386, -207.5187, 415.03583, -134.36595, -223.72092, 53.30528, -174.1018, 150.87605, -327.6196, 423.7829, 142.47635, -198.39749, 363.65408, 355.49268, -194.82953, 376.36633, 289.888, 196.5723, 192.05864, 331.938, -233.12036, 469.87787, 394.71255, 389.4486, -460.0839, -39.60269, 346.5851, 259.96893, 233.03397, 324.654, -148.69595, -551.9584, 497.44363, -271.1994, -143.92447, 408.00977, -205.25378, 535.5403, 151.27934, 152.44041, 543.22595, -203.47032, 396.00427, 558.2928, -62.729034, -303.6936, -205.93582, -133.5499, 518.06744, -274.89923, -187.3101, -495.09882, 533.0257, -631.4285, 577.1141, 406.8994, 38.31375, -17.04024, -35.766518, -230.1948, 492.35938, 521.50433, 469.3696, -202.21893, 439.31247, -141.97705, 489.84332, -153.4754, 303.0165, 385.91318, -408.46347, 448.20963, -369.4488, 470.18143, 357.74545, -149.87755, 202.30765, -624.184, -172.96663, 449.906, 430.4255, -242.93665, -202.40956, 38.550964, -426.60498, -488.3769, -94.38158, 306.63654, 530.0623, -200.34218, -180.71658, 53.24318, -158.33229, -123.14409, 182.61053, 431.59482, -177.45355, -190.1075, 577.7738, -168.87881, -67.1628, -187.22925, -157.9385, 419.7293, -328.46347, -157.01674, -229.73122, -175.98097, 503.75104, -41.57086, 471.42847, 426.10657, -207.5805, 441.2887, -206.68294, 428.47284, 502.83127, -177.26514, -97.508446, -242.80876, 475.49905, 123.08418, 6.8959994, 250.05113, -156.61935, -152.03505, -100.5962, -125.843124, 482.54092, -10.553119, -80.0738, -203.23734, -22.012209, -249.26306, 354.34335, 533.6178, 549.4208, 441.30887, 572.6271, 99.61218, 282.07193, -579.0816, 285.47958, -241.345, 458.52097, -158.89001, 150.82893, -200.96373, 262.3053, 6.1072416, -210.39989, -220.12515, 123.977325, 3.0757265, 92.14144, -178.57599, -163.18723, -189.3385, 247.86859, 375.82083, 440.8351, 440.03677, -255.38359, 200.77534, 329.35892, 257.6, 366.91986, -216.52682, -447.3862, 442.80505, 87.435745, -192.68488, -228.71121, 338.11984, -141.80461, 296.63528, 9.774717, -353.8834, 381.70572, -191.37778, -590.9605, -276.96442, 341.4093, -179.45963, 381.83005, -207.0019, 385.7472, -164.18317, -201.62025, -111.31622, -330.20682, -50.694405, -298.1201, 465.25494, -132.94398, -236.85898, -208.51009, 159.17584, -162.59021, 360.4074, 280.76843, 517.9685, -40.03901, -151.7643, -83.16211, 326.67993, 481.79092, -596.9716, -175.84251, 436.58105, 316.57797, 122.489944, 73.41216, 437.27567, 471.03168, 196.47484, -325.59842, -200.42662, 74.63659, -180.61269, -548.8965, 392.6231, -316.20282, 338.9105, -325.06863, -381.41086, 280.82712, 544.6703, 550.2755, -321.27402, -283.94113, -322.37756, -26.829165, -488.81946, 461.0813, 11.341668, 349.44806, 194.04178, -198.2234, -512.07983, -194.04202, -451.1796, 366.7057, -581.7046, 567.72833, 490.47607, -125.93827, 386.0863, -199.68802, 306.45636, 257.06088, -210.77751, 212.6442, 552.26025, -157.81284, 250.13478, 446.4607, 290.77377, -56.780773, 401.47705, 406.10284, -208.56651, 324.35803, 431.41104, -169.05269, -31.18015, 403.53418, -64.186714, -224.26973, -143.15948, -142.44084, 467.35126, -176.71114, -89.44123, 108.70091, 167.03983, 163.06665, -214.76122, -173.187};
   // std::vector<float> init_z = {5.372072, 5.3720665, 5.3720665, 5.3727283, 32.71784, 5.3720665, 5.373518, 15.498206, 5.3720665, 5.3728237, 6.0980864, 5.372217, 5.3720665, 5.372573, 5.3729725, 5.3720655, 5.3720503, 5.372572, 5.3725166, 5.3721685, 5.3728848, 5.372052, 5.3726473, 5.372877, 5.3935356, 5.372463, 31.095612, 5.3720665, 5.3720665, 9.638956, 5.3720665, 5.3720665, 9.636888, 5.3732853, 6.2062564, 5.3720665, 5.3830805, 5.3720665, 5.3720665, 5.3720684, 5.3720665, 5.3721066, 5.3720913, 5.3723783, 5.3720665, 5.3720665, 5.372078, 5.3728733, -25661.11, 5.3725433, 5.372204, 7.19577, 5.3729324, 6.098073, 5.3720665, 5.3720665, 5.372095, 6.4417048, 10.713971, 5.3730774, 5.3720665, 5.372217, 5.372674, 10.279131, 5.372096, 5.3720665, 5.3726425, 7.1298323, 5.3736596, 5.3724747, 5.3720665, 5.3720493, 5.3730583, 5.8793507, 5.3800344, 5.372123, 14.43379, 5.3721, 5.3724833, 5.3720665, 5.372057, 5.3725967, 5.372883, 5.3720665, 5.3728848, 5.3720603, 5.3720665, 5.3720665, 5.3724003, 5.3721027, 2.2187262, 5.372841, 5.3720665, 6.458581, 5.372802, 5.372883, 5.372695, 11.497971, 5.3720665, 5.3818264, 5.3846006, 5.3723984, 5.5299416, 10.816162, 5.372878, 5.3723783, 5.42132, 5.373003, 5.372549, 5.372842, 5.37237, 5.372057, 5.3728867, 5.372957, 5.3723097, 7.283767, 5.3730335, 5.3727894, 5.3720665, 5.3724823, 5.3720665, 5.3720665, 5.3720665, 5.37265, 5.37269, 5.372822, 5.3720665, 5.3721333, 5.3720665, 5.3722925, 14.035299, 5.3720665, 5.3720875, 5.3720665, 5.372074, 5.3720665, 5.3720493, 5.372719, 5.3727074, 5.3720665, 6.967663, 5.372879, 10.631177, 5.3720894, 5.372077, 5.37232, 5.3724957, 5.3723927, 5.3720665, 6.679183, 5.3720665, 5.3720665, 5.3721037, 12.171927, 5.372877, 5.3720636, 5.3720603, 5.3720703, 5.372079, 6.115175, 5.3720665, 7.922208, 5.3728724, 5.3720665, 5.372879, 5.3720865, 5.3720503, 5.3723745, 5.3720493, 5.372591, 16.349373, 5.372882, 5.3720856, 5.372075, 32.71592, 5.3724947, 5.372078, 5.372883, 25.92253, 5.3728676, 5.3720665, 5.3720665, 5.3720665, 9.4627905, 5.3720493, 0.09065509, 5.3720655, 5.3720665, 5.3720665, 10.990021, 5.3720665, 5.3727646, 5.3721905, 5.372074, 5.3726454, 5.372861, 5.3720665, 5.3720665, 5.3720665, 5.3720694, 5.3720713, 5.3727856, 5.3720613, 5.3720646, 5.372818, 5.372877, 5.372758, 5.37212, 6.0978336, 5.372755, 5.372057, 5.3720665, 5.372877, 8.21122, 5.372838, 5.372761, 5.3720665, 5.3720665, 5.372921, 2.7975578, 5.3720665, 5.372057, 3.6588159, 5.3720665, 0.7118945, 5.3720665, 5.3720665, 5.383436, 5.3720665, 5.3720818, 5.3727922, 5.372061, 5.372076, 5.372078, 5.3720665, 5.372057, 5.3728704, 5.3720665, 6.4203258, 5.3720665, 5.3722296, 5.3728714, 5.3720665, 5.3720636, 5.372074, 5.3720665, 5.3727846, 5.3720503, 5.3720665, 5.3727245, 5.3720665, 5.372183, 5.3728514, 5.3720665, 5.3720703, 15.044289, 5.372074, 5.3720665, 5.3720665, 5.3720665, 5.3720655, 5.3730564, 10.324353, 5.372057, 5.3720665, 12.024912, 5.372057, 5.3720665, 15.171497, 5.3720665, 9.707058, 5.3725796, 5.3720665, 5.372678, 5.3728857, 5.3720684, 5.372761, 5.37278, 8.165314, 15.709482, 5.3720703, 6.7798405, 5.3726997, 5.3723583, 5.3720665, 5.372076, 5.372902, 5.3728275, 4.656451, 12.363775, 5.3725014, 5.372057, 5.372078, 5.3720665, 5.372736, 6.0978994, 5.372344, 5.3720646, 5.3720665, 5.372157, 5.3727894, 5.3720603, 3.2074335, 5.372057, 5.3720665, 5.3720603, 5.3720665, 5.3720503, 5.3720665, 0.29370832, 6.876713, 5.3720665, 5.3720665, 5.3720655, 5.4638824, 5.3720665, 5.3720646, 5.3720665, 5.3720665, 5.3724384, 5.3720665, 5.372858, 11.0322895, 5.3720665, 5.372057, 5.372881, 5.3728724, 5.372801, 5.3720665, 5.3727837, 8.969873, 5.3720665, 5.3720665, 5.3720665, 5.3720665, 5.4328938, 5.3724747, 5.3720665, 5.372629, 5.3720665, 5.3720665, -0.072808266, 5.3720694, 3.2268584, 5.3721886, 5.37206, 5.372074, 5.3728657, 6.2478585, 5.3720665, 5.3729267, 5.372752, 5.3720646, 5.372057, 5.372074, 5.3720665, 11.257588, 5.3720665, 5.372057, 5.3720665, 5.372468, 5.372633, 5.3720665, 5.3720665, 5.372057, 7.034962, 5.372409, 5.5613103, 5.3720493, 5.3720665, 5.3721275, 5.3720665, 5.3724976, 5.374072, 6.240091, 11.154648, 5.372078, 5.3724346, 5.3720665, 5.3720665, 5.3724527, 5.3720636, 5.3728065, 5.372488, 5.3720684, 5.3720665, 5.3720503, 5.3723297, 5.372882, 5.3720665, 5.3720493, 5.372509, 5.372856, 5.372876, 5.372938, 5.372181, 5.3720665, 5.37232, 5.3724833, 5.50631, 5.3728714, 5.372347, 5.372864, 5.3720665, 5.372734, 5.3720913, 5.372261, 5.3726025, 5.3720665, 5.3720503, 0.799469, 6.058429, 15.373046, 5.3758187, 5.3720503, 5.3728676, 5.3720665, 5.3720665, 5.372305, 5.372057, 5.3729515, 5.372608, 5.3720665, 5.372772, 5.3727036, 12.019558, 5.3720665, 5.3727646, 5.3720665, 5.3720665, 5.3726273, 5.3720665, 5.3720684, 5.3741055, 7.800451, 5.3724957, 5.372487, 5.4135923, 5.3720665, 3.6685162, 5.386305, 5.3720665, 5.372326, 5.8911543, 5.3720703, 5.385184, 5.372528, 5.3726454, -0.041918755, 22.125076, 5.372057, 3.864413, 5.3720818, 5.3725405, 5.372921, 1.9342928, 5.3728065, 9.697311, 5.3720665, 5.3720665, 5.3720665, 10.22323, 5.3728495, 5.372778, 5.3720665, 5.3720493, 5.3727856, 5.3720665, 5.372057, 5.372672, 5.3720665, 5.3720665, 5.372489, 5.3727818, 5.3720665, 5.3726587, 5.3720503, 5.372654, 3.639492, 5.3720503, 5.372057, 5.3726273, 14.128801, 5.372074, 5.3724957, 5.3720503, 7.0829663, 5.9521575, 5.3720837, 5.3720665, 5.3720665, 29.104902, 5.3720665, 9.520155, 5.3731337, 14.197947, -1.004189, 5.3720503, 5.3721523, 5.3720665, 5.527771, 5.372718, 0.5626633, 5.372079, 1.1633029, 5.3720665, 5.3720675, 5.3720503, 1.8793182, 5.3720503, -0.6373787, 5.3729286, 9.898281, 5.3720875, -3.933319, 5.372073, 5.576021, 5.3721905, 5.372055, 5.3720665, 5.3720665, 5.3720665, 5.372057, 5.37288, 5.37206, 5.3721714, 5.3728495, 5.372635, 5.372443, 5.372753, 5.372079, 5.372484, 5.3720655, 5.372856, 5.372795, 5.3728056, 5.377885, 5.3720665, 5.3727417, 5.3720665, 5.3720665, 5.3729305, 5.3720603, 5.3720665, 5.3720665, -0.10440159, 15.719942, 11.118353, 5.3720646, 5.403884};
 std::vector<float> init_x = {-596.20276, -97.29434, 325.73154, 188.44614, -66.23915, -50.70931, -64.23439, -318.4336, 473.17258, 85.39743, -1.8153155, 663.266, -6.723584, 60.714928, 418.43567, -385.75385, 105.72305, 142.24751, 76.76, -60.583145, 44.72416, -30.154402, 35.19332, 194.40678, -125.16911, -52.909393, 315.8367, -582.1124, -19.474586, 91.746445, 319.9929, -22.333035, -6.125653, -64.97491, -65.904335, -36.922974, -16.892382, -106.19228, -86.59517, -409.13983, 363.46185, -34.392826, 118.801994, -13.563286, -443.53076, 189.5063, 147.56851, 80.96048, 114.65841, 160.5389, -92.06831, 142.87846, 237.90442, 340.3476, -0.8310233, -20.166557, 59.47429, 204.03496, 144.1152, 67.990326, 10.321786, 211.90233, -112.238144, -27.750828, -2.2459624, -60.014557, 556.6998, -1.8515015, -81.8117, -484.0198, 104.97824, 157.90121, -261.82654, -528.1931, -53.239746, -0.79030967, -61.977486, 209.27763, 358.7602, 4.8041606, -543.81177, 390.2465, -49.61621, -55.2673, -75.83725, -185.60321, 173.12772, -2.1754909, 59.03643, -49.989677, -26.1151, 349.61807, 81.113396, 118.20025, -29.697111, -63.869953, 547.2724, -543.22577, 106.82825, -1.2191973, -139.11969, -73.00008, 111.64206, 45.158, -590.37335, 63.38391, -507.4865, 57.222946, 81.542, -48.818913, -512.8125, -289.83472, -152.21796, -513.46185, -588.1302, 47.49143, -482.14264, -433.69754, -370.69232, -468.84042, 58.170574, -559.5122, 49.51697, -85.16721, 46.662426, 44.384007, -122.137054, 54.78935, -79.50766, 85.83324, -505.84857, -572.255, -451.98343, -40.16523, -510.31366, -229.69998, 112.115776, -180.25641, -570.3333, -62.21259, -167.83357, 162.98315, -335.1633, -375.89948, -194.85805, -489.65808, -31.106834, 67.56499, 87.11972, -447.28693, -141.22935, 60.538696, 72.204315, -486.079, 95.60226, -110.44458, 55.34986, -610.64026, 81.21411, -527.2461, -221.16566, -556.8551, 42.824593, 114.12154, -604.952, -209.74506, 56.03044, 40.287933, -435.63898, 40.678467, 79.07394, -559.65234, 67.17421, -557.375, 103.658554, -148.8657, -243.62006, 39.270653, -264.72928, -196.20901, 43.17632, -367.34137, -130.31642, -582.17664, -197.59943, -58.835697, 48.060238, 62.767506, -344.55917, -220.5326, -343.91144, -235.33261, -222.2172, 56.224937, 22.55457, -513.56335, -252.00732, 88.21452, -611.8136, -22.150972, -191.12604, -14.48435, -337.7006, 376.40387, -440.34882, -741.014, -561.8467, 499.126, 3.5902839, 171.28633, 62.130993, -308.11884, -319.8484, 147.44908, -355.11688, -334.4356, 655.3305, 24.55641, -158.59853, 263.76828, 526.74115, 216.51071, -495.67087, 493.49466, 387.4091, -374.21585, 72.420746, 70.995026, 677.92474, -256.7288, -353.0101, -363.31848, -241.5933, -219.38046, -292.2347, -180.28014, -342.43506, -117.01171, -290.46884, -510.2508, -469.17636, -264.60547, 642.34326, -307.25192, -374.54733, 53.513546, -299.39078, -284.4409, -258.61264, 230.93448, -558.2315, 137.16379, -646.224, -203.44724, -309.32114, -148.20549, 453.60117, -625.5889, 115.67433, -144.1001, -179.08884, -327.69125, 282.67938, -321.4932, 172.01392, -198.63376, 412.99673, -122.86316, -716.7763, 152.71552, 603.3902, 564.5241, 132.05052, -352.95557, 12.2182865, -350.02493, -202.41068, -317.1745, -260.51965, 255.11505, -203.6412, -471.59436, 625.3736, 115.16531, -174.25531, -310.36212, -149.27399, 11.794833, -262.2422, 65.43692, 90.91973, 589.056, -108.51807, 611.9805, 487.19565, -174.17537, 285.01096, -329.52628, -110.25638, -394.213, -309.69473, -100.63306, -58.463757, -78.783875, 270.28006, -94.50361, -632.9562, 321.69528, -60.975136, -47.44074, -49.167625, -32.833393, -186.06468, 465.50064, -543.55414, 475.67105, 508.6612, -51.40459, 529.801, -69.90204, -94.418755, -268.9323, 490.30148, -161.33832, 521.5715, -58.68007, -134.87717, -124.65425, 474.73187, 117.9695, -370.28757, -83.9089, -357.9926, 516.728, -65.43953, -79.5844, -55.336845, -58.94418, 446.62537, -71.76813, 443.65985, 121.377235, 467.71994, 247.22762, 493.8375, -68.45182, 292.2686, -703.5144, 493.9926, 218.90479, -443.7345, -38.52068, -306.5731, -65.11431, -91.71401, -49.95622, 135.47552, -53.98176, -20.807486, -99.1472, 490.16064, 501.03043, 480.9655, -38.3691, -87.482124, -679.4198, 77.59204, -100.40011, -88.411606, -78.1773, -62.60064, 550.9227, 481.15125, -253.9735, 293.90607, 531.0634, -49.91175, -99.189575, 480.10852, 493.19025, 410.14288, 39.573547, 386.4891, -155.09113, -37.84836, 526.54846, 490.09088, -91.59949, 440.34595, -85.68613, -603.81934, 491.02365, 67.81733, -80.90942, -194.2728, -78.546005, 529.67096, -54.437134, -324.34836, 481.96555, -47.40541, 536.26746, -663.67175, 57.304626, -68.73661, 509.44824, -179.75441, 244.12418, -74.826126, -479.0678, -102.37817, -229.37816, 153.58206, 609.50336, -71.8198, -461.5287, -134.22516, 187.16652, -292.9209, -232.55443, -43.910667, -201.22487, 375.6735, -208.53835, 633.30084, -334.9532, -833.84827, 202.10085, -220.80109, -86.69472, -153.98178, 16.84125, 418.82864, 451.24915, -71.23903, 681.50903, 51.252865, -93.39342, -240.18803, -46.174416, 46.210968, 620.24976, 75.07381, -9.761791, -782.25903, 23.275452, -421.82742, -450.21014, -70.71313, -168.02515, 12.417848, -158.10445, 32.790184, -255.71269, -191.20015, 645.9724, 607.62866, -32.90389, -99.543655, 608.8558, 365.06595, -47.883442, -521.7229, -35.796722, 607.76575, -163.22774, -35.400246, 360.33835, 653.14343, 423.78418, -264.86868, -250.43793, 23.684229, 485.16852, 16.497854, -577.1813, -790.4529, 30.418638, 305.33777, -302.40167, -471.99127, 171.09464, 327.04355, -342.69614, 11.040913, 484.38324, -165.75537, -91.230576, -85.05441, -30.435148, 636.989, -333.28058, -810.1389, -478.9917, 29.801693, -108.99415, 14.022915, 203.21362, 661.55475, 493.45914};   
std::vector<float> init_y = {-180.76048, -165.48738, 57.510296, 353.79114, 121.17541, 321.6137, 259.61212, -144.2881, 430.21683, -190.38953, 473.12177, 424.71075, 541.33417, -335.81842, 415.96417, -193.18909, 88.8214, 212.73828, 371.66833, 9.384034, -172.87518, 462.64893, -186.47406, -5.961397, 337.3813, 523.375, -207.45541, -206.85216, 455.44293, -155.93263, -82.59795, 451.70996, -317.0502, 450.38724, -73.20915, 351.61136, 459.55597, 335.52045, 269.65192, -208.90427, 229.61327, 577.63043, 325.74698, 460.61264, -281.6235, -127.102264, -101.437164, -200.68344, 486.755, 197.8103, 326.61047, -198.27365, -213.50525, -182.90222, 334.58722, 243.04436, 343.65283, -85.12666, 148.87106, -185.90634, 437.32147, 3.9142215, 345.81604, 324.26364, 296.82346, 254.75139, 75.624, -141.76808, 462.0461, -325.3761, 334.0004, -204.43588, -139.79282, -308.14346, 453.8876, 560.7672, -286.14795, 5.8121595, -121.81766, 493.01846, -279.32315, -62.015106, 474.1891, 4.065644, 470.9176, -189.00177, 138.11249, 436.2498, -204.72656, 0.15524115, 315.67657, -140.95789, 325.1058, -138.79778, 372.8006, 436.904, 437.86435, -196.82599, 306.39996, 435.32043, -866.003, -819.7493, -247.77107, -1029.1422, -1090.0352, -1005.7521, -872.125, -1016.4888, -920.4471, -829.5642, -1066.0862, -929.2591, -1002.9337, -1049.4465, -916.53314, -1037.7843, -848.00684, -1105.0642, -1091.1036, -1022.25775, -942.3159, -1037.4985, -885.7249, -777.2773, -1027.8907, -1029.1125, -865.54395, -1039.8883, -352.34714, -944.04553, -992.1013, -825.6626, -1052.5269, -502.89618, -1047.7634, -1008.87775, -248.76587, -796.31067, -1003.60394, -831.63403, -1033.3513, -1005.2156, -1100.4048, -1054.7555, -1054.4734, -799.92554, -833.03687, -943.8864, -1018.89685, -815.83075, -1000.5096, -892.65906, -1013.1042, -783.99396, -1026.7437, -806.2762, -1002.1647, -941.05786, -492.6013, -1057.8279, -785.56146, -1003.98425, -1003.63293, -519.2858, -929.6048, -1041.7236, -887.5271, -975.5349, -985.2012, -1054.8165, -1004.3635, -1035.6968, -1020.59875, -1000.7609, -1012.12286, -1023.7474, -1099.1959, -1047.582, -1020.15485, -973.0552, -1021.6968, -1001.5879, -1019.14294, -1065.6083, -1057.0728, -854.9756, -506.00546, -1029.1167, -1066.6104, -1048.7969, -1007.35754, -1023.9032, -1018.3706, -939.0525, -246.19667, -1057.8645, -1095.8318, -1019.0484, -919.01227, -677.4538, -329.0995, 5.9206805, 526.5471, 8.78591, -11.550168, 338.68262, 70.65573, 344.33243, -387.63162, -22.875648, -390.31125, -179.77867, -227.09343, 505.51813, 81.459206, -310.41574, 360.60434, -389.44193, -150.13762, -18.0874, 365.94897, -26.785837, -1.0275768, -16.088366, 39.95142, 322.05756, -374.00702, -367.10864, 401.02948, 584.60364, -53.9745, 99.61872, -213.75887, 483.17142, -15.249582, -264.8218, -163.32576, -180.85197, -325.75903, -8.302235, 23.408245, 114.1758, 61.38623, 306.63425, 44.748936, -361.0301, 109.9747, -53.067024, -259.13763, -22.813885, 24.745323, 508.9375, 412.92004, -226.11525, 508.98862, 55.97133, -2.52987, 65.24829, -358.7205, 541.4222, -64.886215, -137.88255, -21.872871, 352.01227, -3.79455, -0.9500429, 341.51065, 65.06566, 130.8758, 519.9003, 363.36957, -21.764135, 17.53241, -125.2164, -370.2408, -198.7479, -230.06068, 398.93835, -164.20377, -0.005177391, -51.877235, -19.779587, -4.633951, -2.9504347, -259.08588, -332.17383, 568.67896, -370.42145, -283.46567, -389.47968, 561.00494, -29.92037, 495.73093, -31.090338, -14.871153, -126.8046, 61.394432, -302.79297, 14.657529, 170.73416, 229.89857, -48.058224, -38.73429, -137.3115, 444.66394, -77.896965, 663.33435, 405.4737, -16.27047, -115.06753, 351.90985, -79.6308, 542.1437, -17.166887, 661.23, -99.95002, -140.96786, -80.20755, -148.6217, -86.39148, 27.083666, 503.91467, -68.09356, 580.6018, -48.659092, -270.02478, 472.43103, 327.3089, 22.295927, 320.40533, 551.1818, -272.781, 620.52466, -136.55138, -237.37439, -218.08907, -197.35475, -216.9431, 275.67853, -238.07874, -149.18117, 116.5725, 378.19482, 387.03635, -84.69639, 393.6032, 303.04816, 566.1809, -39.547215, 134.54639, 459.2679, -303.3985, 550.36646, -131.42857, 446.89185, -251.02446, 148.05092, -207.0017, -260.21628, -74.73446, -122.69507, -69.34299, -124.804756, -311.03784, -36.328156, 577.33466, 127.23547, 347.8679, -9.421292, -270.0712, -38.4561, -115.36181, -136.45625, 454.59845, 142.18304, -105.56113, 207.02144, -149.84521, -77.83261, -44.8537, 399.70615, 344.48108, 45.03264, 564.99976, 218.09848, -101.62294, -133.42024, -68.38954, 324.7691, -57.46261, 617.9518, -145.61464, 348.56052, -105.77828, 523.8422, -159.86502, -108.85244, -171.32893, 598.6467, -67.78232, 281.43704, 228.97487, 167.29199, 690.0692, -29.457952, 291.44653, -115.36213, 296.24146, 256.9909, 230.20409, 277.60297, 276.48193, 472.37515, -23.729956, 521.1715, 412.0288, 541.35095, 312.51303, 383.97394, 389.0345, -130.48254, -95.14333, 93.07201, 116.62416, 118.62972, 638.2439, 15.440934, 450.65955, -60.104774, -64.60353, -5.636321, 422.55917, 157.97037, 155.19868, -196.2752, -39.042015, 624.5758, -121.8241, -119.4844, -36.814556, 419.1057, 110.07576, 411.87894, -87.566475, -60.83484, -103.21606, 440.868, 414.82855, 54.981415, -67.2189, 622.5019, -116.70374, 101.04901, 391.21893, -194.0567, -46.204304, 293.16724, 376.79636, -48.27884, 289.8433, 117.98436, -73.28834, 178.28279, -41.348064, -89.27139, -71.156265, -163.01863, -11.609739, -21.149418, 210.70096, 363.29962, 262.15033, -18.649834, 181.75818, 286.47064, 220.51479, -32.969723, 445.50275, 291.16248, -239.59784, 141.03949, 292.4823, 316.32678, 664.5542, -253.7092, 161.37518, -34.728546, -3.5805001, 655.4238, -97.692505, -11.898935, -45.769005, -63.121284, 87.02932, -60.486156, -34.033573, 371.8642, 440.5948, 149.97955, 183.8726};
std::vector<float> init_z = {5.372074, 5.381999, 5.391045, 5.3720665, 5.3728924, 5.3726234, 5.3729553, 5.3728523, 5.3720665, 5.372884, 5.3720665, 5.372491, 5.3728857, 6.1158953, 5.3720703, 5.3720665, 5.3720703, 5.3720703, 5.3720703, 5.372115, 5.3998394, 5.3720665, 5.37253, 5.3729706, 5.3729286, 5.3720703, 5.372881, 5.372816, 5.372073, 5.3720665, 5.372879, 5.3720665, 5.7463236, 5.3720665, 5.372875, 5.3720665, 5.3720856, 5.372074, 5.3728514, 5.3721848, 7.0524344, 5.3720665, 5.3720827, 5.372896, 5.372072, 5.372078, 5.3720665, 5.372074, 5.3720665, 5.372058, 5.373005, 5.3720665, 5.3725624, 5.3728876, 5.372759, 5.372492, 5.372259, 5.3720493, 5.372425, 5.3720665, 5.373001, 5.372692, 5.372882, 5.372099, 5.3720827, 5.3722324, 5.3720665, 5.3720684, 5.3720665, 5.3720913, 5.3721523, 5.372135, 5.3729267, 5.3728085, 5.372095, 5.3720665, 5.3725357, 5.372072, 5.3720665, 5.3727245, 5.3720665, 5.3720827, 5.3720703, 5.3720503, 5.3721104, 5.3720665, 5.3721037, 5.3724194, 5.372201, 5.37286, 5.372343, 5.3720665, 5.372449, 5.372669, 5.3728867, 5.3720846, 5.372875, 5.3721046, 5.372883, 5.3726463, 5.372072, 5.3720665, 5.3720503, 5.3724117, 5.3720703, 5.3720703, 5.372876, 5.3729286, 5.3728046, 5.3720665, 5.3720665, 5.3720665, 5.3720665, 5.3723736, 5.391936, 5.372877, 5.372486, 5.3720856, 5.372878, 5.3751326, 5.372637, 5.372057, 5.3720694, 5.3720665, 5.3727818, 5.3728733, 5.372877, 5.393618, 5.3724813, 5.373918, 5.3720665, 5.3725986, 5.372881, 5.3720665, 5.3729534, 5.38324, 5.3728743, 5.373006, 5.3720665, 5.3789144, 5.3724747, 17.183334, 5.372322, 5.3728657, 5.3720665, 5.3720665, 5.3726387, 5.3725376, 5.372614, 5.3720665, 5.372101, 5.3720665, 5.3720665, 5.372057, 5.3720684, 5.886388, 5.372881, 5.3720503, 5.376722, 5.372734, 5.3720665, 5.372671, 5.372057, 5.392333, 5.372054, 5.3923254, 5.3720503, 5.3720665, 5.3720665, 5.3720837, 5.3726826, 5.372593, 5.3729076, 5.372471, 5.37274, 5.376068, 5.372505, 5.3720603, 5.372882, 5.372057, 5.372732, 5.372734, 5.3728848, 5.3720665, 5.3720665, 5.3720694, 5.395313, 5.372878, 5.3724794, 5.3720913, 5.3725767, 5.3720665, 5.3789167, 5.3720665, 5.3720675, 5.3720665, 5.372349, 5.3720655, 5.372058, 5.3720703, 5.3723555, 5.3720665, 5.372654, 5.375705, 5.3720646, 5.3720665, 5.3721275, 5.4451, 5.3720665, 5.3721046, 5.3720665, 5.3720665, 5.398638, 5.372875, 5.3720665, 5.409154, 5.376775, 5.3720665, 5.3720694, 5.372575, 5.372073, 5.425055, 5.372573, 5.397259, 5.372733, 5.372882, 5.372057, 5.372116, 5.37241, 5.3720665, 5.3720665, 5.3727646, 5.3720665, 5.3720665, 5.3724937, 5.3720665, 5.3720603, 5.3720665, 5.372405, 5.3720655, 5.3720603, 5.3727207, 5.421481, 5.3804827, 5.379393, 5.37245, 5.3727264, 5.372879, 5.3720665, 5.372078, 5.3720665, 5.372076, 5.372099, 5.374148, 5.3724213, 5.3727646, 5.3720503, 5.3726826, 5.372074, 5.3720665, 5.3721027, 6.534572, 5.3724213, 5.37235, 5.372875, 5.3720684, 5.37249, 5.3725796, 5.372326, 5.372387, 5.3720665, 5.372217, 5.3720665, 5.37288, 5.3723335, 5.37206, 5.372813, 5.3720818, 5.3720665, 5.3720665, 5.3722887, 6.6508155, 5.3720913, 5.3720694, 5.3730135, 5.3720703, 5.3724365, 5.3728657, 5.372057, 5.3720665, 5.372383, 5.3720665, 5.3720503, 5.3720646, 5.3728924, 5.3720665, 5.372057, 5.3728676, 5.3721905, 5.3745213, 5.3916388, 5.3724985, 5.3730717, 5.372777, 6.493224, 5.3728704, 5.3720675, 6.482006, 5.3720512, 5.3720655, 5.372102, 5.3728848, 5.3720675, 6.393582, 5.372609, 5.3720675, 5.372567, 5.3720684, 5.3720675, 5.372055, 5.3720675, 5.3720613, 6.3887415, 5.3720675, 5.3728857, 5.37267, 5.7562118, 5.7581816, 6.3940597, 5.372776, 5.373288, 5.3728685, 5.372362, 5.372778, 5.372554, 5.3728876, 5.3725796, 5.3728952, 5.372802, 5.372079, 5.3914485, 5.372964, 5.3720613, 5.9196014, 5.859476, 5.3724966, 5.372463, 5.3720512, 20.119184, 5.3728447, 5.3720675, 5.372485, 5.3724966, 5.3722057, 5.3724833, 5.3725014, 5.372693, 5.3720827, 5.3720613, 5.3720675, 5.3725557, 6.0196776, 5.3721075, 5.372062, 5.3720675, 5.3721, 5.372115, 5.373069, 5.3729525, 5.3720675, 5.37271, 5.3727655, 5.372488, 6.7014894, 5.3720675, 5.3720675, 5.3720684, 5.3720512, 6.3933263, 5.8682647, 5.943721, 5.372674, 6.709605, 5.372081, 5.372058, 5.3720675, 5.372876, 5.3720675, 5.3720675, 5.3720512, 5.372117, 5.372939, 5.372546, 5.3720675, 5.3726034, 5.3720675, 5.3720675, 5.372635, 5.3720675, 7.6031547, 5.3720655, 5.3720713, 5.3720675, 5.3720894, 5.3721437, 5.372532, 5.3720655, 5.3720675, 5.3720675, 5.3724785, 5.3722258, 5.3720675, 5.3720512, 5.3730183, 5.3720675, 5.372055, 5.372486, 5.372059, 5.3720503, 5.3720512, 5.3720503, 5.3720675, 5.372821, 5.372079, 5.869624, 5.3720827, 5.3720675, 5.372075, 5.3720675, 5.3720512, 5.3720512, 5.3720627, 5.3728285, 5.372493, 5.3720675, 5.3720675, 5.3720703, 5.372344, 5.3720675, 5.3720503, 5.3720675, 5.3720675, 5.372776, 5.3720503, 5.3726883, 5.3725214, 5.3728456, 5.3720675, 5.3720703, 5.3725014, 5.37234, 5.3720903, 5.3728514, 5.372361, 5.3720617, 6.3880615, 5.3726835, 5.3727617, 5.3720665, 5.37251, 5.3720613, 5.372054, 5.3722544, 5.3720636, 5.3720675, 5.3720675, 5.5332556, 5.3720675, 5.8704896, 5.3720675, 5.3721046, 5.372058, 5.3720675, 5.3720675, 5.3720703, 5.3720675, 5.372095, 5.3729057, 5.3720684, 5.3720675, 5.3725824, 5.3720512, 5.372941, 5.372113, 5.3720675, 5.3723097, 5.3720675, 5.37253, 5.372079, 5.3720675, 6.000577, 5.372527, 5.3720675, 5.3728876, 5.3723288, 5.3720675, 5.3720675, 5.3720675, 5.8696475, 5.372779};
 std::cout << "execution_counter_ : " << execution_counter_ << std::endl;
std::cout << "#################################################################################################" << std::endl;
    initial_position_ = FVector(init_x.at(execution_counter_), init_y.at(execution_counter_), init_z.at(execution_counter_) < 5.37f ? 5.38f : init_z.at(execution_counter_));

    return initial_position_;
}

FVector Navigation::getPredefinedGoalPosition()
{
    // Dirty hack ...
   // std::vector<float> goal_x = {157.707, 422.3461, 25.281965, 63.621063, 166.7038, 158.72296, 172.13914, 3.5349429, -627.5409, 164.53569, -44.64239, 508.2923, -29.323458, -550.6401, 30.598104, -70.265015, 556.2668, -511.09097, 164.31155, 54.295006, -39.521145, 138.6601, 103.65701, 47.704037, -620.82263, -99.76218, 344.09497, 254.0091, 123.05524, 49.49785, -218.63974, 176.48691, 357.2368, 18.109606, -37.400383, 133.35387, 21.53685, -407.1042, -32.721165, -74.34788, 15.726837, 615.9711, 134.34651, -553.8288, 84.55586, 130.44722, -62.239574, 534.12195, 418.86728, -582.5182, -496.78595, 346.81525, 185.0401, 74.34524, 115.12254, 45.849625, 372.35538, 74.96592, 77.741, 224.32065, 93.30401, 129.90593, 178.39017, -33.263233, 212.83823, 88.05075, 186.58162, 346.11853, 114.60882, 159.59172, 51.34323, -10.135539, 494.26663, -170.72867, 233.10588, -592.13257, 322.34827, 238.79347, 8.132667, 20.029795, -69.37199, 4.3162017, 166.94992, 398.06732, -594.4677, 305.5453, -5.8244286, -139.75674, 7.5890303, 3.6112297, -101.9528, 350.49973, 22.984522, 34.799763, 60.59014, -52.11557, -86.58078, -77.04921, -420.6376, 23.59903, 166.78008, 119.660614, -516.6589, 72.65854, 62.24891, 451.02762, -59.25768, 377.50568, 421.06274, 35.855137, 330.13495, 149.16463, -27.397984, -96.83397, -622.37555, -7.5407267, 314.84042, 164.59302, 373.9321, 26.453747, -181.85815, 101.51834, 59.132847, 5.6408973, -0.48667273, 19.864666, 22.156736, -48.737038, -649.2855, -30.986269, 43.34425, -318.6377, -64.132195, -63.791035, 226.54607, 303.69348, 210.50055, 262.58524, 85.273026, 111.25717, 383.9652, 191.77397, 406.48465, -21.827484, 226.50943, 190.54762, 69.636505, 72.65977, 356.55737, -70.541115, 308.87802, -619.6947, -215.26236, -60.31297, 380.56085, 140.17749, -201.61478, 110.73778, 60.276085, 120.6438, 185.22522, 68.843185, 211.72609, -39.1529, -10.519984, 185.95183, 239.3079, -594.4576, 232.13354, 137.99127, -28.120304, -528.2142, 622.69104, 65.70015, -420.668, -50.848164, 308.35648, 97.84331, -51.6377, 32.656837, 86.80582, -59.48654, 176.96477, -32.752266, 631.7219, 40.828655, -72.04836, -207.28998, 109.71492, 175.82524, 419.7357, 226.43594, 228.97755, 84.76065, 97.507965, -63.576145, 38.274475, 104.23372, -484.59586, 165.53046, 386.78424, -45.252136, -43.31202, 212.66669, 147.07196, 166.93921, 479.25424, -288.92493, 95.286194, 416.32202, 84.285545, -532.61505, 330.66956, 26.3772, 355.66736, 181.57675, -3.8301165, -83.22685, 336.28162, 120.620125, 310.50497, 187.82622, 219.333, 69.783104, 102.61734, 128.69104, 94.72142, -210.94745, 7.542214, 42.703484, 136.62662, -334.98877, -277.07697, 202.50955, 194.45178, 91.762886, -10.40832, -61.58084, -46.561035, 332.43466, 335.72003, 7.030134, -427.399, -253.78716, -75.322784, 317.74097, 103.224236, -39.5421, 65.62176, -427.08774, 172.09639, 139.31723, -364.04214, 145.48393, -551.557, 122.87939, 118.85826, 3.6217117, -474.08484, 90.12181, -591.2762, -67.32789, 130.30515, 322.67505, -272.6164, 386.49377, 55.95419, 427.85025, 129.87892, -270.9997, 583.50134, -44.888584, -0.020034911, 453.5779, 370.49164, 182.82385, 86.2838, -42.41909, 349.94556, 96.51033, 171.60901, 362.55322, -475.84448, 125.98268, 182.193, -20.616777, 615.36523, 249.9183, 317.7644, 322.9273, 178.36403, -272.31793, 112.190285, 354.74863, 610.81287, -259.1912, 493.89386, 121.657745, 22.86837, 86.56967, 234.87384, -56.15409, 91.12288, 0.33041596, -48.857872, 164.09938, 364.14444, 151.92256, 161.84177, 586.2482, 403.8207, -20.969315, 133.38455, 388.96948, 65.2579, 328.78204, -32.174934, 115.2259, -43.70887, 228.8258, 229.11426, -56.700623, 34.641464, 133.12999, -14.586372, 190.2307, 370.13348, 320.85684, 211.19899, 155.08641, -653.56604, 106.853325, 24.62932, -23.931423, -353.47778, 21.013348, 112.89074, -39.799942, 147.90578, -233.5934, 447.9212, 106.72604, 381.388, 73.60552, -31.397297, -30.463549, 109.82133, 233.0256, -96.64135, -166.3463, -57.209663, -76.84709, 225.46033, -351.7478, 594.2192, 4.332248, 77.77454, 135.72176, 118.77229, 58.1481, -526.4966, 204.12515, -4.7343254, 230.08807, -569.73175, 325.7207, 163.79224, -607.2589, -494.68195, 71.60318, 325.6995, 27.302467, 202.44124, -141.48288, 208.95476, -33.46559, -457.4607, 119.907265, 154.40535, 183.70178, 162.40233, -68.58885, 154.32011, 159.93001, -34.815723, 195.49776, 399.67102, 155.90732, 120.74024, 341.84625, 156.84909, -48.927864, 88.608, -542.01874, 28.853127, 99.05816, 120.45326, 541.3333, -524.9528, 58.938744, 398.46143, -472.02478, -358.80862, 331.78595, 139.14113, -66.536934, 76.69519, 42.06695, -65.02037, 206.83759, 408.76312, 158.11345, 98.384415, -293.4057, 164.34082, -71.80895, 201.99496, 190.06561, 313.68228, 181.29121, 540.47644, 400.84387, -44.565083, -476.0181, 304.0642, 384.29663, -209.9375, -304.38425, 87.55, -16.705063, -156.50409, -15.740604, 32.906746, 218.48206, 377.23718, 100.39727, -45.18952, -13.248393, -53.51919, 64.59949, 17.692856, 137.44939, 121.13669, 22.284061, -89.28781, -57.686974, -196.71109, 137.64256, 74.19797, 423.50342, -603.23596, -30.16965, -217.94684, 143.364, 220.7331, 302.3077, -327.08603, 412.02374, 103.52823, -597.7164, 506.74963, -18.39285, -276.47287, 189.62912, 93.945885, 121.95481, -38.400124, -247.15543, -498.73254, 120.34449, 47.97619, -329.09647, -69.07906, -270.0794, 308.73138, 422.01862, 129.94136, -61.527, 83.39937, 110.71396, 323.73465, -77.29692, 388.46533, 525.94196, 378.221, 82.9926, 416.0025, -36.30726, -334.784, 348.34048, -75.96022, 98.78359, 303.86005, -41.250816, -48.853924, 62.9634, -45.59901, -68.319916, 35.597847, 136.06207, -519.59766, -245.60526, -50.040226, 613.7775, 20.575027, 57.041626, 146.67886, 174.62779, 396.81525, 175.86319, 27.249844, -226.54065, 111.96133, -446.01257, 90.32057, -18.628752, -22.067764, -341.3962, 320.30817, 70.1752, -104.83066, 205.09381, -220.48685, 226.4099, -14.289564, -1.2757956, 240.68517, -26.33854, 17.574688, 138.52083, 326.40277, 325.50366, -407.1554, 163.15607, -22.351665, -71.07019, 90.38871, 468.7221, -590.83215, -17.432878, -370.73538, 381.69058, 74.06006, 80.1124, -224.14218, 385.52133, 406.54547, 596.603, 25.150602, 220.17557};
   // std::vector<float> goal_y = {434.3903, 142.90297, 490.82837, -179.55312, 5.8898234, 173.62798, -80.803535, -367.85547, -146.03964, 547.92865, -310.32516, 425.52332, 537.844, -176.71284, 535.6041, 326.79694, 89.31431, -200.3764, 533.8178, -144.35612, -290.2734, 374.41315, 60.331863, -200.79147, -133.38058, -305.85788, 13.671728, -146.50499, 433.40363, -288.4981, -185.91754, -0.552319, -185.67053, 432.64673, -464.49786, 476.62775, 322.68405, -311.36182, 352.5184, 433.2223, 282.21454, 91.0112, 198.50267, -267.1551, 316.1697, 152.54892, -206.8362, 419.07556, 368.39838, -200.92702, -259.4988, 78.315346, -62.995796, -322.13092, -162.77292, -126.284805, -178.22098, 26.267485, -351.67706, 322.17676, 448.89923, 497.409, 113.374664, -300.80048, 307.33154, 329.91898, 159.88524, 70.18365, 298.50717, -29.53086, 454.36884, -327.70715, 451.87115, -196.78535, -91.72423, -240.91638, 64.66289, 477.2116, -327.54294, 323.9445, -551.6886, 247.63275, 101.87436, 387.02765, -220.40573, 50.074673, 457.55377, -195.54549, -58.23684, 464.39804, -527.5541, 17.077734, 299.38458, -450.50647, -155.44687, -200.89804, -295.26434, -399.29337, -169.60004, 535.99475, 146.5722, -15.160207, -186.90652, -377.36905, -138.59076, 368.14496, 320.47687, 411.8869, 121.94938, 548.59644, 434.875, -90.908394, -413.9052, 278.87378, -177.66078, -140.6912, 327.7856, 78.347305, 83.22768, 504.46442, -133.99542, -123.49971, 322.3897, 249.58311, 456.33575, 550.968, 370.34412, -170.11021, -141.80383, 246.45834, -353.39178, -191.53549, 486.2068, 330.13403, -70.64432, 86.663086, 6.313561, -149.7356, -167.23701, -125.35193, -118.78887, 345.84833, 171.8358, 432.12653, -153.24876, -203.22658, 474.69458, -198.38596, 123.89566, -638.1709, 65.38087, -200.9635, -163.32161, -624.7849, 16.10878, 355.36285, -155.67987, -411.19226, 322.55365, 0.43012977, 420.78732, -214.87318, 288.12408, 454.28555, 568.1097, 36.650047, 291.46475, -237.76477, -82.99646, 280.27933, -641.9025, -295.71768, 429.21497, 575.7106, -209.32932, 325.3819, -196.2329, 29.241337, 492.4863, 487.20416, 367.9334, 555.9564, -65.885704, -661.59143, 352.56372, 365.47507, 443.90753, -174.48686, 43.444374, -87.75733, 135.01659, -87.998505, -131.62091, 507.35995, -381.4495, 316.97052, -180.86392, -360.95612, -215.91705, -57.41719, 78.69461, 434.67615, 443.90173, -98.27012, 490.26306, -27.099842, 453.047, -194.5919, -226.2604, 408.23822, -223.1793, -195.70067, -200.19359, -124.80491, -75.65874, 265.27518, 514.58105, 333.31277, -65.054054, -301.0536, 353.756, -210.74315, -101.0119, -597.9138, 327.80643, 19.087269, 370.67725, -123.20141, 302.66617, 314.08582, 564.9157, -132.21332, -155.65051, 450.01483, -1.3729472, 496.63882, 562.6226, -645.0663, 355.73813, 408.53305, 144.58168, 532.80707, -318.217, -138.07735, 563.82605, -54.75287, -247.0837, -208.71011, 520.3262, -182.79553, 568.31647, -17.530556, -199.16608, 171.1127, -258.868, -565.0815, -133.85379, 513.2459, -234.72336, 88.33672, -295.77655, 464.78992, -110.37497, -81.74376, -126.87503, 35.1478, 364.46054, 404.15674, 113.357346, -139.67027, 395.2212, 433.70868, -336.00195, 371.948, -23.414541, -105.532906, 358.5866, -629.6874, -95.12506, -350.56635, 513.89557, 37.498886, -246.81125, 49.15648, -26.1159, -189.1795, 397.89008, -169.25534, -101.50186, -111.1866, 174.66713, -158.23381, 427.27243, 406.90524, 413.27322, -147.83865, 395.57242, 292.48752, 368.47388, 320.56885, 292.5561, 332.01282, -205.00449, 501.44452, -460.438, -199.63759, 101.04212, -146.89171, 430.7632, 376.24023, 284.8318, 550.2807, -146.6553, -112.076355, 444.17334, 52.244987, -191.30435, 143.37915, -473.0238, 453.96918, -106.33687, -634.15796, -591.13586, 538.7013, 366.37192, 432.19333, 419.90015, -22.168282, -26.646534, 306.90146, -172.90637, 441.7511, 512.60486, 444.48047, -174.77438, 505.74423, -53.96697, 480.06058, 65.85916, -167.96301, 94.650116, -386.09924, 42.75401, -592.36194, 437.47055, 296.17697, 48.31868, -135.43297, -632.35645, -154.22095, 538.7547, 470.0645, -117.88295, -165.42244, 115.52963, -297.1556, -374.74863, -202.46413, -195.69019, 569.974, -257.5939, -207.12218, -131.4938, -142.46582, -215.88965, 198.47556, 506.626, -235.19377, -179.68358, 522.0766, 65.93471, 375.73474, -124.89845, -164.4307, 428.6332, -514.54785, -209.21434, 102.9285, 103.48978, 474.7658, 156.5382, 512.65265, 525.9707, 346.53525, 548.71277, -40.104244, 375.17612, 514.06665, 276.97723, 0.8133972, 244.06308, 564.8344, -212.29413, -211.32469, 356.57053, 83.90389, -153.2768, 382.80502, -249.05118, 455.39026, 144.39108, -268.6388, -151.56772, -17.877512, -64.43591, 303.75256, 569.56616, 514.67804, 439.39166, 459.78674, 154.47063, 302.40555, -587.3763, -148.8328, -150.4607, 447.42517, -70.40685, 251.54305, -5.664095, 9.0303335, 448.4643, 395.2298, 12.5679, -292.70535, -59.844955, 212.48763, -173.01555, -159.77477, 35.56771, 328.64233, -145.9258, 458.3174, 535.75977, -106.97348, 22.999712, 36.92298, 366.68314, 325.5442, -148.13516, -326.48386, 427.0561, 352.39154, -118.37005, 307.81, 285.04697, -194.66736, -167.12708, -124.1349, -347.91202, 397.21884, -276.7274, -327.94183, -227.88443, -167.60327, -188.58363, 351.87927, -177.56326, 414.3587, 181.14444, -228.30936, 420.8944, -614.6715, -164.67151, -203.95721, 422.3495, -160.47331, 257.63498, -130.12991, -195.50627, -100.40757, 359.17133, -124.787415, 537.27075, -167.61717, 175.90894, 243.85336, 369.93796, 466.41425, -310.4394, 176.91565, 444.38745, -132.22182, -53.97216, 399.21558, -67.09253, 510.1849, 89.513885, -439.04193, -205.40756, 435.26227, -206.82735, -540.1492, 290.28906, -480.16937, -200.8374, -370.8554, -528.2823, -203.96725, 492.58267, 558.0534, -272.55286, -177.21364, -411.4649, 77.23907, -568.7224, 568.7087, 81.27899, 289.79813, 424.69806, 294.2538, -310.45593, -136.38417, -291.20737, -297.2259, -340.7343, 460.18512, 524.2123, -145.75232, -194.67587, 345.3665, -129.23299, -176.90732, -130.83655, 12.040231, 475.5986, 260.73096, -70.006805, 545.0198, 340.2876, 233.45328, 374.05847, 28.007412, -188.79947, 115.63993, 450.32022, -182.6952, 55.08767, 414.355, -262.67014, 7.6897063, -154.74529, 52.50093, 546.1105, -221.9799, -174.34338, 437.16727, 171.44234, 406.97955, 297.1172, 337.33548};
   // std::vector<float> goal_z = {5.372072, 5.3720665, 5.3720665, 5.3727283, 32.71784, 5.3720665, 5.373518, 15.498206, 5.3720665, 5.3728237, 6.0980864, 5.372217, 5.3720665, 5.372573, 5.3729725, 5.3720655, 5.3720503, 5.372572, 5.3725166, 5.3721685, 5.3728848, 5.372052, 5.3726473, 5.372877, 5.3935356, 5.372463, 31.095612, 5.3720665, 5.3720665, 9.638956, 5.3720665, 5.3720665, 9.636888, 5.3732853, 6.2062564, 5.3720665, 5.3830805, 5.3720665, 5.3720665, 5.3720684, 5.3720665, 5.3721066, 5.3720913, 5.3723783, 5.3720665, 5.3720665, 5.372078, 5.3728733, -25661.11, 5.3725433, 5.372204, 7.19577, 5.3729324, 6.098073, 5.3720665, 5.3720665, 5.372095, 6.4417048, 10.713971, 5.3730774, 5.3720665, 5.372217, 5.372674, 10.279131, 5.372096, 5.3720665, 5.3726425, 7.1298323, 5.3736596, 5.3724747, 5.3720665, 5.3720493, 5.3730583, 5.8793507, 5.3800344, 5.372123, 14.43379, 5.3721, 5.3724833, 5.3720665, 5.372057, 5.3725967, 5.372883, 5.3720665, 5.3728848, 5.3720603, 5.3720665, 5.3720665, 5.3724003, 5.3721027, 2.2187262, 5.372841, 5.3720665, 6.458581, 5.372802, 5.372883, 5.372695, 11.497971, 5.3720665, 5.3818264, 5.3846006, 5.3723984, 5.5299416, 10.816162, 5.372878, 5.3723783, 5.42132, 5.373003, 5.372549, 5.372842, 5.37237, 5.372057, 5.3728867, 5.372957, 5.3723097, 7.283767, 5.3730335, 5.3727894, 5.3720665, 5.3724823, 5.3720665, 5.3720665, 5.3720665, 5.37265, 5.37269, 5.372822, 5.3720665, 5.3721333, 5.3720665, 5.3722925, 14.035299, 5.3720665, 5.3720875, 5.3720665, 5.372074, 5.3720665, 5.3720493, 5.372719, 5.3727074, 5.3720665, 6.967663, 5.372879, 10.631177, 5.3720894, 5.372077, 5.37232, 5.3724957, 5.3723927, 5.3720665, 6.679183, 5.3720665, 5.3720665, 5.3721037, 12.171927, 5.372877, 5.3720636, 5.3720603, 5.3720703, 5.372079, 6.115175, 5.3720665, 7.922208, 5.3728724, 5.3720665, 5.372879, 5.3720865, 5.3720503, 5.3723745, 5.3720493, 5.372591, 16.349373, 5.372882, 5.3720856, 5.372075, 32.71592, 5.3724947, 5.372078, 5.372883, 25.92253, 5.3728676, 5.3720665, 5.3720665, 5.3720665, 9.4627905, 5.3720493, 0.09065509, 5.3720655, 5.3720665, 5.3720665, 10.990021, 5.3720665, 5.3727646, 5.3721905, 5.372074, 5.3726454, 5.372861, 5.3720665, 5.3720665, 5.3720665, 5.3720694, 5.3720713, 5.3727856, 5.3720613, 5.3720646, 5.372818, 5.372877, 5.372758, 5.37212, 6.0978336, 5.372755, 5.372057, 5.3720665, 5.372877, 8.21122, 5.372838, 5.372761, 5.3720665, 5.3720665, 5.372921, 2.7975578, 5.3720665, 5.372057, 3.6588159, 5.3720665, 0.7118945, 5.3720665, 5.3720665, 5.383436, 5.3720665, 5.3720818, 5.3727922, 5.372061, 5.372076, 5.372078, 5.3720665, 5.372057, 5.3728704, 5.3720665, 6.4203258, 5.3720665, 5.3722296, 5.3728714, 5.3720665, 5.3720636, 5.372074, 5.3720665, 5.3727846, 5.3720503, 5.3720665, 5.3727245, 5.3720665, 5.372183, 5.3728514, 5.3720665, 5.3720703, 15.044289, 5.372074, 5.3720665, 5.3720665, 5.3720665, 5.3720655, 5.3730564, 10.324353, 5.372057, 5.3720665, 12.024912, 5.372057, 5.3720665, 15.171497, 5.3720665, 9.707058, 5.3725796, 5.3720665, 5.372678, 5.3728857, 5.3720684, 5.372761, 5.37278, 8.165314, 15.709482, 5.3720703, 6.7798405, 5.3726997, 5.3723583, 5.3720665, 5.372076, 5.372902, 5.3728275, 4.656451, 12.363775, 5.3725014, 5.372057, 5.372078, 5.3720665, 5.372736, 6.0978994, 5.372344, 5.3720646, 5.3720665, 5.372157, 5.3727894, 5.3720603, 3.2074335, 5.372057, 5.3720665, 5.3720603, 5.3720665, 5.3720503, 5.3720665, 0.29370832, 6.876713, 5.3720665, 5.3720665, 5.3720655, 5.4638824, 5.3720665, 5.3720646, 5.3720665, 5.3720665, 5.3724384, 5.3720665, 5.372858, 11.0322895, 5.3720665, 5.372057, 5.372881, 5.3728724, 5.372801, 5.3720665, 5.3727837, 8.969873, 5.3720665, 5.3720665, 5.3720665, 5.3720665, 5.4328938, 5.3724747, 5.3720665, 5.372629, 5.3720665, 5.3720665, -0.072808266, 5.3720694, 3.2268584, 5.3721886, 5.37206, 5.372074, 5.3728657, 6.2478585, 5.3720665, 5.3729267, 5.372752, 5.3720646, 5.372057, 5.372074, 5.3720665, 11.257588, 5.3720665, 5.372057, 5.3720665, 5.372468, 5.372633, 5.3720665, 5.3720665, 5.372057, 7.034962, 5.372409, 5.5613103, 5.3720493, 5.3720665, 5.3721275, 5.3720665, 5.3724976, 5.374072, 6.240091, 11.154648, 5.372078, 5.3724346, 5.3720665, 5.3720665, 5.3724527, 5.3720636, 5.3728065, 5.372488, 5.3720684, 5.3720665, 5.3720503, 5.3723297, 5.372882, 5.3720665, 5.3720493, 5.372509, 5.372856, 5.372876, 5.372938, 5.372181, 5.3720665, 5.37232, 5.3724833, 5.50631, 5.3728714, 5.372347, 5.372864, 5.3720665, 5.372734, 5.3720913, 5.372261, 5.3726025, 5.3720665, 5.3720503, 0.799469, 6.058429, 15.373046, 5.3758187, 5.3720503, 5.3728676, 5.3720665, 5.3720665, 5.372305, 5.372057, 5.3729515, 5.372608, 5.3720665, 5.372772, 5.3727036, 12.019558, 5.3720665, 5.3727646, 5.3720665, 5.3720665, 5.3726273, 5.3720665, 5.3720684, 5.3741055, 7.800451, 5.3724957, 5.372487, 5.4135923, 5.3720665, 3.6685162, 5.386305, 5.3720665, 5.372326, 5.8911543, 5.3720703, 5.385184, 5.372528, 5.3726454, -0.041918755, 22.125076, 5.372057, 3.864413, 5.3720818, 5.3725405, 5.372921, 1.9342928, 5.3728065, 9.697311, 5.3720665, 5.3720665, 5.3720665, 10.22323, 5.3728495, 5.372778, 5.3720665, 5.3720493, 5.3727856, 5.3720665, 5.372057, 5.372672, 5.3720665, 5.3720665, 5.372489, 5.3727818, 5.3720665, 5.3726587, 5.3720503, 5.372654, 3.639492, 5.3720503, 5.372057, 5.3726273, 14.128801, 5.372074, 5.3724957, 5.3720503, 7.0829663, 5.9521575, 5.3720837, 5.3720665, 5.3720665, 29.104902, 5.3720665, 9.520155, 5.3731337, 14.197947, -1.004189, 5.3720503, 5.3721523, 5.3720665, 5.527771, 5.372718, 0.5626633, 5.372079, 1.1633029, 5.3720665, 5.3720675, 5.3720503, 1.8793182, 5.3720503, -0.6373787, 5.3729286, 9.898281, 5.3720875, -3.933319, 5.372073, 5.576021, 5.3721905, 5.372055, 5.3720665, 5.3720665, 5.3720665, 5.372057, 5.37288, 5.37206, 5.3721714, 5.3728495, 5.372635, 5.372443, 5.372753, 5.372079, 5.372484, 5.3720655, 5.372856, 5.372795, 5.3728056, 5.377885, 5.3720665, 5.3727417, 5.3720665, 5.3720665, 5.3729305, 5.3720603, 5.3720665, 5.3720665, -0.10440159, 15.719942, 11.118353, 5.3720646, 5.403884};
std::vector<float> goal_x = {-352.76187, -166.1195, 378.14343, 228.04933, -93.007614, 121.25244, 144.50974, -431.98456, 561.15826, -247.01164, 108.592415, 508.54178, 126.75961, 68.519196, 385.69946, -493.55133, 134.7883, 152.96402, -18.75237, 157.9078, 221.14049, 172.88828, 90.757645, 123.38121, -40.85567, -44.27873, 306.20035, 110.14581, 156.35341, -101.35513, 488.61456, -11.648458, -55.10822, -70.9519, 175.97723, 238.24454, -34.981033, 23.319193, 42.32489, 125.78856, 439.4588, 17.86525, 193.0358, 60.321434, -91.7206, -265.7604, 6.482785, -554.1745, 4.1967773, -44.684845, 49.675148, -69.240395, 21.384893, 325.5131, -595.64404, -174.9992, 122.33687, -295.8097, -598.4771, 118.30317, 123.95122, -470.43982, -586.0336, -144.75883, 187.4404, -322.69022, 322.408, -510.6762, -65.68394, -607.17017, 115.60839, 234.63634, 137.45004, -258.25977, -76.665665, -37.73737, -61.759224, 202.79092, 392.10034, 106.53114, 169.26128, 547.3367, 124.3337, 167.67325, -54.65931, -654.121, -562.1965, 104.9417, 169.19322, 90.37951, 132.90532, 440.49756, 90.63006, 75.55773, -87.65826, 26.126163, 317.5366, -254.54791, 183.38371, -15.035797, -313.4278, -473.08994, 60.677322, 122.55589, -474.34274, 83.86284, -570.5866, 64.63236, 73.07205, -609.6439, -496.01276, -181.4805, -507.8658, -558.19446, -256.8083, 114.59199, -376.67352, -346.891, -328.37027, -576.4098, 55.162445, -555.4601, 109.5087, -462.02957, 41.206657, 112.32085, -363.20004, 108.68176, -70.8345, 61.45504, -23.854824, -401.4013, -403.62112, 100.461136, -121.301865, -245.17062, 39.847507, -350.41104, -475.7657, -149.05228, -270.4497, 165.26872, -515.39465, -539.15643, -121.51242, -162.0517, -600.57074, 101.06735, 55.334137, -380.3487, -290.48096, 56.05369, 42.25042, -553.6247, 41.012196, -372.89832, 113.3967, -412.05334, -66.25959, -410.56247, -204.06458, -473.64856, 45.964817, -74.639145, -382.24756, -199.35074, 72.89718, 87.58229, -325.77222, 71.371826, 73.29657, -477.73813, 109.09179, -322.85327, 38.738853, -251.57016, -230.9075, 39.413048, -355.69315, -147.43867, 63.91557, -570.2382, -575.5502, -251.62834, -245.96976, -140.01176, -82.952805, 117.39444, -268.1458, -242.87903, -227.26056, -498.61816, -393.78906, 104.630424, 100.80482, -135.07469, -418.68365, 117.91005, -380.01965, -571.81433, -295.53577, -422.0415, 107.585686, 546.66144, -295.00864, -687.0674, -224.99675, 413.12244, 99.35881, -134.027, -5.074687, -160.23631, -619.275, -281.53458, 251.96695, -356.15594, 468.53088, 1.4766135, -238.10141, -325.1841, 530.4513, -21.376665, -279.04578, 412.9355, 456.981, -235.03317, 52.19545, -13.669481, 458.5087, -292.31573, -150.79858, 182.32135, 254.85175, -150.86346, -335.44052, 25.573702, -233.29984, -344.15778, 11.241044, -185.97733, -281.78247, -632.661, 624.12006, -363.76212, -583.2178, 102.90934, -402.6439, -140.5139, 232.99612, -320.06393, -244.50888, -344.26752, -647.07825, -603.2995, -175.32759, -485.39804, 435.14655, -315.0424, -7.031288, -187.55257, -314.9372, -249.59842, -392.63965, 269.41498, -287.86163, -276.05902, 458.79114, -577.29694, -533.6685, -138.83466, 560.7442, 450.47186, -160.50792, -263.63535, -2.0900948, -185.76218, -246.8324, -135.65845, -271.6239, 174.97748, -293.97318, -336.06006, 375.01935, -145.00146, -230.18906, -238.08733, -247.7365, 92.36575, -242.31058, 66.19733, 48.297157, 416.06412, -44.355774, 495.44672, 475.66855, -268.34442, -123.23194, -284.0359, -325.43115, -245.95007, -83.40597, -42.61824, -61.440765, 257.29968, -540.1941, -330.1388, -312.76367, -50.22526, 160.41841, -60.697216, -401.92444, -83.99494, -267.98703, 551.1817, 4.7313395, 357.22238, 485.46243, -512.62396, 494.67413, -20.348797, -109.456055, 274.99384, 67.61864, -338.4237, 337.2787, -34.44687, -176.59912, 203.69345, 501.42682, 240.92068, -76.4888, -102.81118, -655.237, 218.25468, -135.66525, -64.73816, -38.381416, -107.28062, -286.53787, -40.91057, 445.68152, 62.35383, 1.7495438, -80.78301, 506.58862, -424.68085, -401.9446, -375.34772, 536.27795, 60.20575, 294.44556, -24.654232, -13.278529, 323.59027, -361.59497, -366.01215, 90.41276, -70.23189, 435.63443, 207.81757, 335.8821, 454.9455, 550.1973, -151.43442, -64.495544, -375.83087, 340.63525, -38.35308, -18.088787, -36.115547, -277.84082, 241.85342, 481.98273, -493.1046, 501.42136, 208.56302, -13.292375, -395.17697, 501.6762, 522.16815, 323.17957, -38.06712, 290.1888, 72.54394, -61.94508, 439.66992, 262.00034, -191.91408, -516.8048, -258.5591, -405.7507, 494.09604, 337.14545, -146.03763, -196.52762, -90.00039, 279.30725, -410.5232, -660.33594, 192.57425, -138.90425, 327.8538, -514.1155, -10.652191, -251.34694, 555.9089, -131.82129, 353.87784, -170.06462, -145.97485, 56.850006, 13.049484, -122.572365, 389.25067, -472.75732, 63.015835, -408.62024, 670.3059, -391.87317, -316.48282, -141.75438, 17.05906, 429.7462, -295.99414, 405.32648, 43.034092, -773.57886, -156.26855, -118.559906, 17.823084, -11.921897, -10.985301, 693.55817, 340.40112, -213.08505, 648.9182, -219.72289, -223.10223, -41.862774, -280.29138, -58.521637, 421.21887, -125.27088, -176.52481, -755.56805, -78.63021, -248.19937, -112.20992, -13.425113, -191.8771, -37.764526, -62.977253, -125.62195, -203.85994, -147.99207, 554.4435, 388.1936, -52.717083, -519.2492, 336.34595, 599.2179, -72.508514, -440.43475, -603.3957, 353.63373, -67.86185, -165.77534, 442.02164, 596.6059, 450.09705, 1.3110753, -483.2138, -84.977875, 644.64496, 128.12779, -306.10092, -800.01697, -107.05296, 133.40518, -61.13343, -73.92122, 686.66144, 687.29504, -225.93765, -84.739426, 644.50085, -47.151993, -159.30551, -21.909573, -186.66231, 602.5305, -4.54325, -755.73083, -455.85318, -99.540665, -41.26416, -138.55339, -77.86391, 408.44965, 179.04776};
std::vector<float> goal_y = {-196.10913, -146.97357, 44.7948, -58.346848, 313.0045, 294.6808, 94.9718, -275.7445, 411.85718, -132.44284, 559.64575, 376.09875, 449.4834, -583.0758, -86.6233, -264.0197, 114.57469, -203.30252, 327.01654, 158.69989, -180.64534, 524.1732, 11.849993, -174.24782, 375.14612, 550.8784, 88.96525, 205.10638, 430.73993, -192.8883, 420.3717, 429.93732, -305.52292, 505.63632, -163.88538, 300.20538, 419.20285, 341.2671, 329.1228, 373.1886, 104.935356, 504.46252, 296.48837, 555.8087, 339.6975, -153.61232, 1.3794461, -204.84714, 532.9456, -132.47783, -141.75542, -153.08862, -159.68825, 362.3567, -287.57153, -171.07965, -99.54363, -192.93135, -228.16017, -124.63001, 552.4321, -265.286, -175.33382, -181.12463, 216.61447, -175.89255, 189.60487, -270.61868, 541.9789, -147.5423, -191.9089, -41.79051, -116.36362, -155.95804, 502.63092, 569.3567, -501.92023, -204.30641, 102.27583, 580.0016, 204.88644, 382.504, 472.15967, -65.77142, 537.33124, -134.64207, -303.1471, 519.37506, 292.07602, 16.862635, 355.4497, 364.37762, 183.16391, 332.55872, 354.58237, 467.3891, -123.21657, -169.56189, 290.67218, 504.26685, -968.22217, -987.7148, -246.77724, -992.8663, -1057.2312, -929.25696, -803.69525, -891.4281, -907.26575, -852.4062, -809.4153, -1060.6774, -881.2452, -986.886, -932.3092, -990.2614, -897.8547, -883.1323, -983.22314, -906.16376, -885.38257, -902.43097, -924.8605, -888.2387, -977.32434, -996.1363, -852.6953, -932.73517, -428.85345, -899.69116, -696.15063, -1039.788, -784.68207, -495.00275, -828.01874, -942.8517, -248.5206, -980.7725, -858.44006, -914.2279, -947.2028, -957.22205, -877.60126, -1040.1067, -891.5885, -854.35144, -892.6214, -1043.3142, -1008.8446, -826.7658, -908.997, -1027.8307, -1037.6982, -949.25165, -1053.4247, -965.93396, -990.3852, -852.7534, -437.3402, -783.73395, -984.97906, -985.973, -971.6326, -381.90802, -839.7146, -980.28394, -1042.0779, -1054.4669, -1064.7354, -1021.4437, -861.4681, -808.1529, -877.44745, -933.8526, -1032.6938, -1044.7224, -834.59485, -947.9127, -1076.7302, -931.277, -978.84814, -1052.8679, -1044.3123, -1055.4747, -1106.4017, -891.72394, -490.12378, -974.574, -911.73505, -849.6481, -986.6314, -862.1693, -970.1823, -952.8628, -246.4565, -824.7805, -1019.25415, -881.5353, -873.6525, -1072.3842, 12.710711, 6.8891964, 555.62787, 377.91443, 58.889957, 129.57498, 385.67792, 121.03204, -331.97754, -215.04454, -369.23715, -213.27374, 44.50831, 570.9905, 37.939793, -65.319984, 279.73926, -349.56723, -143.86298, 85.983955, 14.749507, 9.237339, 87.21642, 269.3598, 11.68607, -46.225304, -390.99048, -364.68488, 87.044464, 554.3044, 33.880493, -23.3203, 23.980917, 527.6382, 54.4599, -14.737756, -336.73108, -81.85837, 53.35633, 36.21534, 152.61154, 54.262833, -2.2416296, 38.696766, -18.882523, -334.96463, 335.12347, -215.29137, 15.485579, 97.67885, 41.723618, 510.8966, 344.94843, 43.605644, 572.39856, -2.4438353, -2.5662274, 146.45169, -368.23682, 586.7981, 83.05087, 113.712975, -12.238641, 53.349136, 359.96533, 3.7885833, 272.81476, 22.098326, 220.72653, 563.7253, 317.21085, 244.79694, -31.201569, 405.40286, -337.45892, 360.40866, -19.946577, 48.153183, -47.093887, -14.2096, 105.694626, -277.0837, 35.069244, 108.72354, -316.65808, -310.7719, 583.25256, -348.58154, -231.77223, -360.56183, 502.44656, 69.40252, 487.81195, 348.8796, 238.96906, 323.17834, -209.63155, 151.67163, -310.67575, 64.107216, 402.45172, 489.56036, 288.92154, 278.82477, 580.82697, 250.07727, 573.59515, 415.27438, 300.96686, 250.45366, 559.42535, -215.64542, 324.54416, -131.15503, 411.78955, 60.85447, -138.125, 630.5148, 76.900894, 185.31339, 259.14618, 342.90594, 118.07189, 602.56506, 141.22447, -46.866776, 328.3779, 432.10107, 60.483414, 344.7225, 237.17976, 28.300697, 597.69476, 129.87376, 258.762, -131.77393, -123.10869, 302.84714, 557.0583, 288.93524, 101.387115, 170.00159, 314.1013, -150.32875, -18.87408, 461.8847, 478.47556, 585.5111, -166.96979, 132.0686, 283.01578, 109.07775, 326.8717, 271.7234, 415.44952, 345.03882, 149.26141, 473.5924, 267.18573, 408.72076, 115.53411, 68.9036, -148.81648, 439.65237, 90.26245, 350.8123, 74.474014, 359.2587, 443.98303, 182.8086, 572.4276, 131.56747, 118.05325, 582.16266, -145.66554, 139.45544, -143.66925, 612.47943, 35.02925, -101.3769, 467.8449, -37.73966, 148.32333, 373.5005, -108.19353, 69.977, 119.48392, 365.45105, 598.9154, 293.8657, 441.82443, -40.438114, 364.38278, 318.0733, 415.78058, 186.28036, 45.654434, 418.60474, 631.047, 112.16533, 230.83257, 160.13286, 213.95709, 599.9618, -110.654724, 98.01492, 212.54556, 36.279724, 428.39716, -13.406361, 377.63623, 280.94366, 434.52063, 102.027596, 199.1919, 129.89575, 380.04376, 57.085194, 427.36407, 531.7788, 517.01953, -32.458897, 215.62766, -6.024719, 256.65033, 401.03223, -134.29672, 497.20096, 231.45123, 18.190378, -245.56409, 448.73743, 108.64096, 271.35092, -146.20772, 0.7110627, 333.55154, -169.6172, 218.14494, -108.42284, 363.87372, 96.33247, 449.69424, -248.06924, -137.99496, -221.14902, 264.52814, 0.9543872, -98.950294, -9.2428875, 432.21893, 554.6367, -94.99444, 265.811, -77.4063, 223.36156, 173.005, 259.88864, 202.38794, 264.066, 209.79752, 232.77875, 223.09418, 223.96832, 109.6497, -153.9638, -197.07323, 296.45172, -81.7901, 152.2843, -32.95476, 70.04819, -141.20177, 175.1368, 426.95734, 565.5367, -64.93646, 558.1359, 300.73785, 456.7551, 662.7216, 25.988373, 144.9783, 392.83868, -138.03397, 109.83766, 318.54688, 164.16351, -105.125534, -67.82923, 49.11869, -50.534733, -69.27995, -7.33047, 2.0106661, 6.7437606, 338.94147, 494.13, 283.27252, 256.5902};
std::vector<float> goal_z = {5.372074, 5.381999, 5.391045, 5.3720665, 5.3728924, 5.3726234, 5.3729553, 5.3728523, 5.3720665, 5.372884, 5.3720665, 5.372491, 5.3728857, 6.1158953, 5.3720703, 5.3720665, 5.3720703, 5.3720703, 5.3720703, 5.372115, 5.3998394, 5.3720665, 5.37253, 5.3729706, 5.3729286, 5.3720703, 5.372881, 5.372816, 5.372073, 5.3720665, 5.372879, 5.3720665, 5.7463236, 5.3720665, 5.372875, 5.3720665, 5.3720856, 5.372074, 5.3728514, 5.3721848, 7.0524344, 5.3720665, 5.3720827, 5.372896, 5.372072, 5.372078, 5.3720665, 5.372074, 5.3720665, 5.372058, 5.373005, 5.3720665, 5.3725624, 5.3728876, 5.372759, 5.372492, 5.372259, 5.3720493, 5.372425, 5.3720665, 5.373001, 5.372692, 5.372882, 5.372099, 5.3720827, 5.3722324, 5.3720665, 5.3720684, 5.3720665, 5.3720913, 5.3721523, 5.372135, 5.3729267, 5.3728085, 5.372095, 5.3720665, 5.3725357, 5.372072, 5.3720665, 5.3727245, 5.3720665, 5.3720827, 5.3720703, 5.3720503, 5.3721104, 5.3720665, 5.3721037, 5.3724194, 5.372201, 5.37286, 5.372343, 5.3720665, 5.372449, 5.372669, 5.3728867, 5.3720846, 5.372875, 5.3721046, 5.372883, 5.3726463, 5.372072, 5.3720665, 5.3720503, 5.3724117, 5.3720703, 5.3720703, 5.372876, 5.3729286, 5.3728046, 5.3720665, 5.3720665, 5.3720665, 5.3720665, 5.3723736, 5.391936, 5.372877, 5.372486, 5.3720856, 5.372878, 5.3751326, 5.372637, 5.372057, 5.3720694, 5.3720665, 5.3727818, 5.3728733, 5.372877, 5.393618, 5.3724813, 5.373918, 5.3720665, 5.3725986, 5.372881, 5.3720665, 5.3729534, 5.38324, 5.3728743, 5.373006, 5.3720665, 5.3789144, 5.3724747, 17.183334, 5.372322, 5.3728657, 5.3720665, 5.3720665, 5.3726387, 5.3725376, 5.372614, 5.3720665, 5.372101, 5.3720665, 5.3720665, 5.372057, 5.3720684, 5.886388, 5.372881, 5.3720503, 5.376722, 5.372734, 5.3720665, 5.372671, 5.372057, 5.392333, 5.372054, 5.3923254, 5.3720503, 5.3720665, 5.3720665, 5.3720837, 5.3726826, 5.372593, 5.3729076, 5.372471, 5.37274, 5.376068, 5.372505, 5.3720603, 5.372882, 5.372057, 5.372732, 5.372734, 5.3728848, 5.3720665, 5.3720665, 5.3720694, 5.395313, 5.372878, 5.3724794, 5.3720913, 5.3725767, 5.3720665, 5.3789167, 5.3720665, 5.3720675, 5.3720665, 5.372349, 5.3720655, 5.372058, 5.3720703, 5.3723555, 5.3720665, 5.372654, 5.375705, 5.3720646, 5.3720665, 5.3721275, 5.4451, 5.3720665, 5.3721046, 5.3720665, 5.3720665, 5.398638, 5.372875, 5.3720665, 5.409154, 5.376775, 5.3720665, 5.3720694, 5.372575, 5.372073, 5.425055, 5.372573, 5.397259, 5.372733, 5.372882, 5.372057, 5.372116, 5.37241, 5.3720665, 5.3720665, 5.3727646, 5.3720665, 5.3720665, 5.3724937, 5.3720665, 5.3720603, 5.3720665, 5.372405, 5.3720655, 5.3720603, 5.3727207, 5.421481, 5.3804827, 5.379393, 5.37245, 5.3727264, 5.372879, 5.3720665, 5.372078, 5.3720665, 5.372076, 5.372099, 5.374148, 5.3724213, 5.3727646, 5.3720503, 5.3726826, 5.372074, 5.3720665, 5.3721027, 6.534572, 5.3724213, 5.37235, 5.372875, 5.3720684, 5.37249, 5.3725796, 5.372326, 5.372387, 5.3720665, 5.372217, 5.3720665, 5.37288, 5.3723335, 5.37206, 5.372813, 5.3720818, 5.3720665, 5.3720665, 5.3722887, 6.6508155, 5.3720913, 5.3720694, 5.3730135, 5.3720703, 5.3724365, 5.3728657, 5.372057, 5.3720665, 5.372383, 5.3720665, 5.3720503, 5.3720646, 5.3728924, 5.3720665, 5.372057, 5.3728676, 5.3721905, 5.3745213, 5.3916388, 5.3724985, 5.3730717, 5.372777, 6.493224, 5.3728704, 5.3720675, 6.482006, 5.3720512, 5.3720655, 5.372102, 5.3728848, 5.3720675, 6.393582, 5.372609, 5.3720675, 5.372567, 5.3720684, 5.3720675, 5.372055, 5.3720675, 5.3720613, 6.3887415, 5.3720675, 5.3728857, 5.37267, 5.7562118, 5.7581816, 6.3940597, 5.372776, 5.373288, 5.3728685, 5.372362, 5.372778, 5.372554, 5.3728876, 5.3725796, 5.3728952, 5.372802, 5.372079, 5.3914485, 5.372964, 5.3720613, 5.9196014, 5.859476, 5.3724966, 5.372463, 5.3720512, 20.119184, 5.3728447, 5.3720675, 5.372485, 5.3724966, 5.3722057, 5.3724833, 5.3725014, 5.372693, 5.3720827, 5.3720613, 5.3720675, 5.3725557, 6.0196776, 5.3721075, 5.372062, 5.3720675, 5.3721, 5.372115, 5.373069, 5.3729525, 5.3720675, 5.37271, 5.3727655, 5.372488, 6.7014894, 5.3720675, 5.3720675, 5.3720684, 5.3720512, 6.3933263, 5.8682647, 5.943721, 5.372674, 6.709605, 5.372081, 5.372058, 5.3720675, 5.372876, 5.3720675, 5.3720675, 5.3720512, 5.372117, 5.372939, 5.372546, 5.3720675, 5.3726034, 5.3720675, 5.3720675, 5.372635, 5.3720675, 7.6031547, 5.3720655, 5.3720713, 5.3720675, 5.3720894, 5.3721437, 5.372532, 5.3720655, 5.3720675, 5.3720675, 5.3724785, 5.3722258, 5.3720675, 5.3720512, 5.3730183, 5.3720675, 5.372055, 5.372486, 5.372059, 5.3720503, 5.3720512, 5.3720503, 5.3720675, 5.372821, 5.372079, 5.869624, 5.3720827, 5.3720675, 5.372075, 5.3720675, 5.3720512, 5.3720512, 5.3720627, 5.3728285, 5.372493, 5.3720675, 5.3720675, 5.3720703, 5.372344, 5.3720675, 5.3720503, 5.3720675, 5.3720675, 5.372776, 5.3720503, 5.3726883, 5.3725214, 5.3728456, 5.3720675, 5.3720703, 5.3725014, 5.37234, 5.3720903, 5.3728514, 5.372361, 5.3720617, 6.3880615, 5.3726835, 5.3727617, 5.3720665, 5.37251, 5.3720613, 5.372054, 5.3722544, 5.3720636, 5.3720675, 5.3720675, 5.5332556, 5.3720675, 5.8704896, 5.3720675, 5.3721046, 5.372058, 5.3720675, 5.3720675, 5.3720703, 5.3720675, 5.372095, 5.3729057, 5.3720684, 5.3720675, 5.3725824, 5.3720512, 5.372941, 5.372113, 5.3720675, 5.3723097, 5.3720675, 5.37253, 5.372079, 5.3720675, 6.000577, 5.372527, 5.3720675, 5.3728876, 5.3723288, 5.3720675, 5.3720675, 5.3720675, 5.8696475, 5.372779};
    target_location_.Location = FVector(goal_x.at(execution_counter_), goal_y.at(execution_counter_), goal_z.at(execution_counter_) < 5.37f ? 5.38f : goal_z.at(execution_counter_));

    return target_location_.Location;
}

bool Navigation::navSystemRebuild()
{
    nav_sys_ = FNavigationSystem::GetCurrent<UNavigationSystemV1>(agent_actor_->GetWorld());
    ASSERT(nav_sys_ != nullptr);

    const INavAgentInterface* actor_as_nav_agent = CastChecked<INavAgentInterface>(agent_actor_);
    ASSERT(actor_as_nav_agent != nullptr);

    nav_data_ = nav_sys_->GetNavDataForProps(actor_as_nav_agent->GetNavAgentPropertiesRef(), actor_as_nav_agent->GetNavAgentLocation());
    ASSERT(nav_data_ != nullptr);

    nav_mesh_ = Cast<ARecastNavMesh>(nav_data_);
    ASSERT(nav_mesh_ != nullptr);

    nav_mesh_bounds_ = nullptr;
    for (TActorIterator<ANavMeshBoundsVolume> it(agent_actor_->GetWorld()); it; ++it) {
        nav_mesh_bounds_ = *it;
    }
    ASSERT(nav_mesh_bounds_ != nullptr);

    // Set the NavMesh properties:
    nav_mesh_->AgentRadius = Config::getValue<float>({"SIMULATION_CONTROLLER", "NAVIGATION", "NAVMESH", "AGENT_RADIUS"});
    nav_mesh_->AgentHeight = Config::getValue<float>({"SIMULATION_CONTROLLER", "NAVIGATION", "NAVMESH", "AGENT_HEIGHT"});
    nav_mesh_->CellSize = Config::getValue<float>({"SIMULATION_CONTROLLER", "NAVIGATION", "NAVMESH", "CELL_SIZE"});
    nav_mesh_->CellHeight = Config::getValue<float>({"SIMULATION_CONTROLLER", "NAVIGATION", "NAVMESH", "CELL_HEIGHT"});
    nav_mesh_->AgentMaxSlope = Config::getValue<float>({"SIMULATION_CONTROLLER", "NAVIGATION", "NAVMESH", "AGENT_MAX_SLOPE"});
    nav_mesh_->AgentMaxStepHeight = Config::getValue<float>({"SIMULATION_CONTROLLER", "NAVIGATION", "NAVMESH", "AGENT_MAX_STEP_HEIGHT"});
    nav_mesh_->MergeRegionSize = Config::getValue<float>({"SIMULATION_CONTROLLER", "NAVIGATION", "NAVMESH", "MERGE_REGION_SIZE"});
    nav_mesh_->MinRegionArea = Config::getValue<float>({"SIMULATION_CONTROLLER", "NAVIGATION", "NAVMESH", "MIN_REGION_AREA"}); // ignore region that are too small
    nav_mesh_->MaxSimplificationError = Config::getValue<float>({"SIMULATION_CONTROLLER", "NAVIGATION", "NAVMESH", "MAX_SIMPLIFINCATION_ERROR"});

    // Dynamic update navMesh location and size
    FBox worldBox = GetWorldBoundingBox();
    nav_mesh_bounds_->GetRootComponent()->SetMobility(EComponentMobility::Movable);
    nav_mesh_bounds_->SetActorLocation(worldBox.GetCenter(), false);          // Place the navmesh at the center of the map
    nav_mesh_bounds_->SetActorRelativeScale3D(worldBox.GetSize() / 200.0f);   // Rescae the navmesh
    nav_mesh_bounds_->GetRootComponent()->UpdateBounds();
    nav_sys_->OnNavigationBoundsUpdated(nav_mesh_bounds_);

    if (Config::getValue<bool>({"SIMULATION_CONTROLLER", "NAVIGATION", "NAVMESH", "USE_STATIC_NAVMESH"})) {
        nav_mesh_bounds_->GetRootComponent()->SetMobility(EComponentMobility::Static);
    }
    else { // A dynmic navmesh will account for changes occuring in the environment at runtime. But this is more computationally intensive...
        nav_mesh_bounds_->GetRootComponent()->SetMobility(EComponentMobility::Movable); 
    }

    nav_sys_->Build(); // Rebuild NavMesh, required for update AgentRadius

    return true;
}

void Navigation::traceGround(FVector& spawn_position, FRotator& spawn_rotator, const FVector& box_half_size)
{
    FVector startLoc = spawn_position + FVector(0, 0, 100);
    FVector endLoc = spawn_position + FVector(0, 0, -1000);

    FCollisionQueryParams collisionParams(FName(TEXT("trace2ground")), true, agent_actor_);
    FHitResult hit(ForceInit);

    if (UKismetSystemLibrary::BoxTraceSingle(agent_actor_->GetWorld(), startLoc, endLoc, box_half_size, spawn_rotator, ETraceTypeQuery::TraceTypeQuery1, false, TArray<AActor*>(), EDrawDebugTrace::Type::ForDuration, hit, true)) {
        spawn_position = hit.Location;
    }
}

FBox Navigation::GetWorldBoundingBox(bool scale_ceiling)
{
    FBox box(ForceInit);
    for (TActorIterator<AActor> it(agent_actor_->GetWorld()); it; ++it) {
        if (it->ActorHasTag("architecture") || it->ActorHasTag("furniture")) {
            box += it->GetComponentsBoundingBox(false, true);
        }
    }
    // Remove ceiling
    return !scale_ceiling ? box : box.ExpandBy(box.GetSize() * 0.1f).ShiftBy(FVector(0, 0, -0.3f * box.GetSize().Z));
}


